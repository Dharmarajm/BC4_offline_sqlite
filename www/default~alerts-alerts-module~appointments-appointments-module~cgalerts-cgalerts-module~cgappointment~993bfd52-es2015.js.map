{"version":3,"sources":["./src/app/sqlite-database/database_provider.ts"],"names":[],"mappings":"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","file":"default~alerts-alerts-module~appointments-appointments-module~cgalerts-cgalerts-module~cgappointment~993bfd52-es2015.js","sourcesContent":["import { HttpClient } from '@angular/common/http';\r\nimport { Injectable } from '@angular/core';\r\nimport { SQL_SELECT_ALL_CREDENTIALS, Setting, SQL_SELECT_ALL_EVENTS, events, SQL_SELECT_ALL_ENUMS, enum_masters, SQL_SELECT_ALL_HEALTH_DETAILS, SQL_SELECT_ALL_USERS,SQL_SELECT_ALL_EMERGENCY_DATA  } from './database.interface'\r\n\r\nimport { DatabaseProvider } from './database';\r\n/*\r\n  Generated class for the SettingProvider provider.\r\n\r\n  See https://angular.io/guide/dependency-injection for more info on providers\r\n  and Angular DI.\r\n*/\r\n@Injectable()\r\nexport class DataBaseSummaryProvider {\r\n\r\n  constructor(public http: HttpClient,private databaseService: DatabaseProvider) {\r\n    console.log('Hello SettingProvider Provider');\r\n  }\r\n\r\n    getAll(): Promise<Setting[]> {\r\n        return this.databaseService.getDatabase().then(database => {\r\n            return database.executeSql(SQL_SELECT_ALL_CREDENTIALS, []).then((data) => {\r\n                let settings: Setting[] = [];\r\n                for (let i = 0; i < data.rows.length; i++) {\r\n                    settings.push({\r\n                        id: data.rows.item(i).id,\r\n                        email: data.rows.item(i).email,\r\n                        password: data.rows.item(i).password\r\n                    });\r\n                };\r\n                return settings;\r\n            });\r\n        });\r\n    }\r\n\r\n    async getAllEvents(event_type,tab,offset): Promise<any> {\r\n        let checkEvent = await this.checkEventType(event_type,tab,offset);\r\n        let sqlEventQuery = SQL_SELECT_ALL_EVENTS+checkEvent;\r\n        \r\n        return this.databaseService.getDatabase().then(database => {\r\n            return database.executeSql(sqlEventQuery, []).then((data) => {\r\n                let events: events[] = [];\r\n                \r\n                for (let i = 0; i < data.rows.length; i++) {\r\n                    let event_json:any = null;\r\n                    let eventAssetsJson:any = null;\r\n                    if (data.rows.item(i).event_options != null) {\r\n                        event_json = JSON.parse(data.rows.item(i).event_options);\r\n                    }\r\n                    if (data.rows.item(i).event_assets != null) {\r\n                        eventAssetsJson = JSON.parse(data.rows.item(i).event_assets);\r\n                    }\r\n                    events.push({\r\n                        id: data.rows.item(i).id,\r\n                        event_id:data.rows.item(i).event_id,\r\n                        event_name: data.rows.item(i).event_name,\r\n                        description: data.rows.item(i).description,\r\n                        value: data.rows.item(i).value,\r\n                        event_datetime: data.rows.item(i).event_datetime,\r\n                        event_type: data.rows.item(i).event_type,\r\n                        event_category: data.rows.item(i).event_category,\r\n                        event_assets: eventAssetsJson,\r\n                        event_options: event_json,\r\n                        user_id:data.rows.item(i).user_id,\r\n                        delete1:data.rows.item(i).delete1,\r\n                        created_at: data.rows.item(i).created_at,\r\n                        updated_at: data.rows.item(i).updated_at\r\n                    });  \r\n                };\r\n                return { count:data.rows.length,event_list:events};\r\n            })\r\n        })\r\n    }\r\n\r\n    async getAllEventsSearchList(event_type,search,additionType,offset): Promise<any> {\r\n        let checkEvent = await this.checkEventTypeSearch(event_type,search,additionType,offset);\r\n        let sqlSearchEventQuery = SQL_SELECT_ALL_EVENTS+checkEvent;\r\n        \r\n        return this.databaseService.getDatabase().then(database => {\r\n            return database.executeSql(sqlSearchEventQuery, []).then((data) => {\r\n                let events: events[] = [];\r\n                \r\n                for (let i = 0; i < data.rows.length; i++) {\r\n                    let event_json:any = null;\r\n                    let eventAssetsJson:any = null;\r\n                    if (data.rows.item(i).event_options != null) {\r\n                        event_json = JSON.parse(data.rows.item(i).event_options);\r\n                    }\r\n                    if (data.rows.item(i).event_assets != null) {\r\n                        eventAssetsJson = JSON.parse(data.rows.item(i).event_assets);\r\n                    }\r\n                    events.push({\r\n                        id: data.rows.item(i).id,\r\n                        event_id: data.rows.item(i).event_id,\r\n                        event_name: data.rows.item(i).event_name,\r\n                        description: data.rows.item(i).description,\r\n                        value: data.rows.item(i).value,\r\n                        event_datetime: data.rows.item(i).event_datetime,\r\n                        event_type: data.rows.item(i).event_type,\r\n                        event_category: data.rows.item(i).event_category,\r\n                        event_assets: eventAssetsJson,\r\n                        event_options: event_json,\r\n                        user_id: data.rows.item(i).user_id,\r\n                        delete1: data.rows.item(i).delete1,\r\n                        created_at: data.rows.item(i).created_at,\r\n                        updated_at: data.rows.item(i).updated_at\r\n                    });  \r\n                };\r\n                return { count:data.rows.length,event_list:events };\r\n            })\r\n        })\r\n    }\r\n\r\n    async getVitalEvents(event_type,search,additionType): Promise<any> {\r\n        let checkEvent = await this.checkEventType(event_type,search,additionType);\r\n        let sqlSearchEventQuery = SQL_SELECT_ALL_EVENTS+checkEvent;\r\n\r\n        return this.databaseService.getDatabase().then(database => {\r\n            return database.executeSql(sqlSearchEventQuery, []).then((data) => {\r\n               console.log(data,\"vital\")\r\n               for (let i = 0; i < data.rows.length; i++) {\r\n                   console.log(data.rows.item(i));\r\n               }\r\n            })\r\n        })        \r\n\r\n    }\r\n\r\n    async checkEventType(event,tab,offset) {\r\n        \r\n        let eventQuery:any;\r\n        let user_id = await this.databaseService.getuserID();\r\n        //let nowDate = new Date().toJSON()\r\n        if(event=='appointment' && tab=='New'){\r\n            return eventQuery= ` WHERE (event_type='${event}' AND DATETIME(event_datetime)>=DATETIME('now') AND delete1='false' AND user_id='${user_id}') ORDER BY event_datetime ASC LIMIT 10 OFFSET ${offset}`      \r\n        }else if(event=='appointment' && tab=='history'){\r\n            return eventQuery= ` WHERE (event_type='${event}' AND DATETIME(event_datetime)<DATETIME('now') AND delete1='false' AND user_id='${user_id}') ORDER BY event_datetime ASC LIMIT 10 OFFSET ${offset}`\r\n        }else if(event=='health_diary' || event=='doc_visit'){\r\n            return eventQuery= ` WHERE (event_type='${event}' AND delete1='false' AND user_id='${user_id}') ORDER BY created_at DESC LIMIT 10 OFFSET ${offset}`\r\n        }if(event=='vital'){\r\n            return eventQuery= ` WHERE (event_type='${event}' AND delete1='false' AND user_id='${user_id}') ORDER BY event_datetime DESC`\r\n        }else{\r\n            return eventQuery= ` WHERE (event_type='${event}' AND delete1='false' AND user_id='${user_id}') ORDER BY event_datetime DESC LIMIT 10 OFFSET ${offset}`\r\n        }\r\n        \r\n    }\r\n\r\n    async checkEventTypeSearch(event,search,type,offset) {\r\n        let eventSearchQuery:any;\r\n        //let nowDate = new Date().toJSON()\r\n        let user_id = await this.databaseService.getuserID();\r\n        if(event=='appointment' && type=='New'){\r\n            \r\n            return eventSearchQuery= ` WHERE ((event_name LIKE '%${search}%') OR (description LIKE '%${search}%') OR (event_category LIKE '%${search}%')) AND (event_type='${event}' AND DATETIME(event_datetime)>=DATETIME('now') AND delete1='false' AND user_id='${user_id}') ORDER BY event_datetime ASC LIMIT 10 OFFSET ${offset}`\r\n            \r\n        }else if(event=='appointment' && type=='history'){\r\n            \r\n            return eventSearchQuery= ` WHERE ((event_name LIKE '%${search}%') OR (description LIKE '%${search}%') OR (event_category LIKE '%${search}%')) AND (event_type='${event}' AND DATETIME(event_datetime)<DATETIME('now') AND delete1='false' AND user_id='${user_id}') ORDER BY event_datetime ASC LIMIT 10 OFFSET ${offset}`\r\n        }else if(event=='health_diary' || event=='doc_visit'){\r\n            return eventSearchQuery= ` WHERE ((event_name LIKE '%${search}%') OR (description LIKE '%${search}%') OR (event_category LIKE '%${search}%')) AND (event_type='${event}' AND delete1='false' AND user_id='${user_id}') ORDER BY created_at DESC LIMIT 10 OFFSET ${offset}`\r\n        }else{\r\n            return eventSearchQuery= ` WHERE ((event_name LIKE '%${search}%') OR (description LIKE '%${search}%') OR (event_category LIKE '%${search}%')) AND (event_type='${event}' AND delete1='false' AND user_id='${user_id}') ORDER BY event_datetime DESC LIMIT 10 OFFSET ${offset}`\r\n        }\r\n        \r\n    }\r\n\r\n    getEnumMasters(name): Promise<any> {\r\n        let sqlEnumQuery = SQL_SELECT_ALL_ENUMS+` WHERE category_name='${name}'`;\r\n        \r\n        return this.databaseService.getDatabase().then(database => {\r\n            return database.executeSql(sqlEnumQuery, []).then((data) => {\r\n                \r\n                let Enums = [];\r\n               \r\n                for (let i = 0; i < data.rows.length; i++) {\r\n                    Enums.push(data.rows.item(i).name);\r\n                };\r\n                \r\n                return { count: data.rows.length, enum_masters: Enums };\r\n            })\r\n        })\r\n    }\r\n\r\n    async diaryRecordFilter(data): Promise<any> {\r\n        let user_id = await this.databaseService.getuserID();\r\n      let sqlSearchEventQuery = SQL_SELECT_ALL_EVENTS+` WHERE (created_at BETWEEN DATE('${data[\"from_date\"]}') AND DATE('${data[\"end_date\"]}','+1 DAY')) AND (event_type='${data[\"event_type\"]}' AND delete1='false' AND user_id='${user_id}') ORDER BY created_at DESC LIMIT 10 OFFSET 0`;\r\n        \r\n        return this.databaseService.getDatabase().then(database => {\r\n            return database.executeSql(sqlSearchEventQuery, []).then((data) => {\r\n                let events: events[] = [];\r\n                let eventAssetsJson:any = null;\r\n\r\n                for (let i = 0; i < data.rows.length; i++) {\r\n                    let event_json:any = null;\r\n                    if (data.rows.item(i).event_options != null) {\r\n                        event_json = JSON.parse(data.rows.item(i).event_options);\r\n                    }\r\n                    if (data.rows.item(i).event_assets != null) {\r\n                        eventAssetsJson = JSON.parse(data.rows.item(i).event_assets);\r\n                    }\r\n\r\n                    events.push({\r\n                        id: data.rows.item(i).id,\r\n                        event_id: data.rows.item(i).event_id,\r\n                        event_name: data.rows.item(i).event_name,\r\n                        description: data.rows.item(i).description,\r\n                        value: data.rows.item(i).value,\r\n                        event_datetime: data.rows.item(i).event_datetime,\r\n                        event_type: data.rows.item(i).event_type,\r\n                        event_category: data.rows.item(i).event_category,\r\n                        event_assets: eventAssetsJson,\r\n                        event_options: event_json,\r\n                        user_id: data.rows.item(i).user_id,\r\n                        delete1: data.rows.item(i).delete1,\r\n                        created_at: data.rows.item(i).created_at,\r\n                        updated_at: data.rows.item(i).updated_at\r\n                    });  \r\n                };\r\n                return { count: data.rows.length, event_list: events };\r\n            })\r\n        })     \r\n    }\r\n\r\n    async getAboutData(): Promise<any> {\r\n        let user_id = await this.databaseService.getuserID(); \r\n        let getQRcode = await this.setQRcode();\r\n        let sqlHealthQuery = SQL_SELECT_ALL_HEALTH_DETAILS+` WHERE name='policy'`;\r\n        let sqlUserQuery = SQL_SELECT_ALL_USERS+` WHERE (id='${user_id}' AND role_id=1)`; //(id='${user_id}' AND role_id=1)\r\n        return this.databaseService.getDatabase().then(async (database) => {\r\n            \r\n            let healthData=[];\r\n            let userData=[];\r\n\r\n            await database.executeSql(sqlHealthQuery, []).then((data1) => {\r\n              for (let i = 0; i < data1.rows.length; i++) {\r\n                let event_json:any = null;\r\n                if (data1.rows.item(i).attribute_name_value != '') {\r\n                    event_json = JSON.parse(data1.rows.item(i).attribute_name_value);\r\n                }  \r\n                healthData.push({ \r\n                    id: data1.rows.item(i).id, \r\n                    health_id: data1.rows.item(i).health_id, \r\n                    name: data1.rows.item(i).name, \r\n                    attribute_name_value: event_json, \r\n                    user_id: data1.rows.item(i).user_id, \r\n                    created_at: data1.rows.item(i).created_at, \r\n                    updated_at: data1.rows.item(i).updated_at \r\n                })  \r\n              }\r\n            }).catch(res=>{\r\n                console.log(res)\r\n            })\r\n           \r\n            await database.executeSql(sqlUserQuery, []).then((data2) => {\r\n              console.log(data2.rows)\r\n              for (let i = 0; i < data2.rows.length; i++) {\r\n                  console.log(data2.rows.item(i))\r\n                let attribute_json:any = null;                    \r\n                if(data2.rows.item(i).user_picture!=null){\r\n                  attribute_json = JSON.parse(data2.rows.item(i).user_picture);    \r\n                }  \r\n                  \r\n                userData.push({ \r\n                    id: data2.rows.item(i).id,\r\n                    name: data2.rows.item(i).name,\r\n                    email: data2.rows.item(i).email,\r\n                    password: data2.rows.item(i).password,\r\n                    mobile_no: data2.rows.item(i).mobile_no,\r\n                    address: data2.rows.item(i).address,\r\n                    country: data2.rows.item(i).country,\r\n                    blood_group: data2.rows.item(i).blood_group,\r\n                    age: data2.rows.item(i).age,\r\n                    user_uid: data2.rows.item(i).user_uid,\r\n                    forgot_password_code: data2.rows.item(i).forgot_password_code,\r\n                    user_picture: attribute_json,\r\n                    active_status: data2.rows.item(i).active_status,\r\n                    role_id: data2.rows.item(i).role_id,\r\n                    created_at: data2.rows.item(i).created_at,\r\n                    updated_at: data2.rows.item(i).updated_at,\r\n                    delete1: data2.rows.item(i).delete1\r\n                })  \r\n              }\r\n            }).catch(res=>{\r\n                console.log(res)\r\n            })\r\n\r\n            return { policies: healthData, user_info: userData[0], qrcode_image: getQRcode };\r\n\r\n        })\r\n    }\r\n\r\n    async getHealthDeatails(): Promise<any> {\r\n       //let user_id = await this.databaseService.getuserID(); \r\n       let sqlHealthQuery = SQL_SELECT_ALL_HEALTH_DETAILS+` WHERE name='health'`;\r\n       return this.databaseService.getDatabase().then((database) => {\r\n         return database.executeSql(sqlHealthQuery, []).then((data) => {\r\n            let healthData=[];\r\n            for (let i = 0; i < data.rows.length; i++) {\r\n                let event_json:any = null;\r\n                if (data.rows.item(i).attribute_name_value != '') {\r\n                    event_json = JSON.parse(data.rows.item(i).attribute_name_value);\r\n                }  \r\n                healthData.push({ \r\n                    id: data.rows.item(i).id, \r\n                    health_id: data.rows.item(i).health_id, \r\n                    name: data.rows.item(i).name, \r\n                    attribute_name_value: event_json, \r\n                    user_id: data.rows.item(i).user_id, \r\n                    created_at: data.rows.item(i).created_at, \r\n                    updated_at: data.rows.item(i).updated_at \r\n                })  \r\n            }\r\n\r\n            return { health_detail: healthData };\r\n         }).catch(res=>{\r\n            console.log(res)\r\n        })  \r\n       })\r\n    }\r\n\r\n    getEmergencyDeatails(): Promise<any> {\r\n       let sqlEmergeQuery = SQL_SELECT_ALL_EMERGENCY_DATA;\r\n       let sqlUsersQuery = SQL_SELECT_ALL_USERS+` WHERE (role_id=1 AND delete1='false')`;\r\n       console.log(sqlUsersQuery)\r\n       return this.databaseService.getDatabase().then(async (database) => {\r\n        let emergencyContacts = []; \r\n        let careGiverData=[];\r\n        await database.executeSql(sqlEmergeQuery, []).then((data) => {\r\n            for (let i = 0; i < data.rows.length; i++) {\r\n                emergencyContacts.push({\r\n                id: data.rows.item(i).id,\r\n                emergency_id: data.rows.item(i).emergency_id,\r\n                contact_name: data.rows.item(i).contact_name,\r\n                emergency_no: data.rows.item(i).emergency_no,\r\n                user_type: data.rows.item(i).user_type,\r\n                user_id: data.rows.item(i).user_id,\r\n                created_at: data.rows.item(i).created_at,\r\n                updated_at: data.rows.item(i).updated_at,\r\n                delete1: data.rows.item(i).delete1\r\n                });\r\n            } \r\n         })\r\n         await database.executeSql(sqlUsersQuery, []).then((data1) => {\r\n            for (let i = 0; i < data1.rows.length; i++) {\r\n              if(data1.rows.item(i).email!=null){ \r\n                let attribute_json:any = null;                    \r\n                if(data1.rows.item(i).user_picture!=null){\r\n                  attribute_json = JSON.parse(data1.rows.item(i).user_picture);  \r\n                }\r\n                careGiverData.push({\r\n                    id: data1.rows.item(i).id,\r\n                    name: data1.rows.item(i).name,\r\n                    email: data1.rows.item(i).email,\r\n                    password: data1.rows.item(i).password,\r\n                    mobile_no: data1.rows.item(i).mobile_no,\r\n                    address: data1.rows.item(i).address,\r\n                    country: data1.rows.item(i).country,\r\n                    blood_group: data1.rows.item(i).blood_group,\r\n                    age: data1.rows.item(i).age,\r\n                    user_uid: data1.rows.item(i).user_uid,\r\n                    forgot_password_code: data1.rows.item(i).forgot_password_code,\r\n                    user_picture: attribute_json,\r\n                    active_status: data1.rows.item(i).active_status,\r\n                    role_id: data1.rows.item(i).role_id,\r\n                    created_at: data1.rows.item(i).created_at,\r\n                    updated_at: data1.rows.item(i).updated_at,\r\n                    delete1: data1.rows.item(i).delete1\r\n                });\r\n              } \r\n            } \r\n         })\r\n         \r\n         return { caregiver_count: careGiverData.length ,caregivers: careGiverData,emergency_contact_count: emergencyContacts.length,emergency_detail: emergencyContacts };  \r\n       }).catch(res=>{\r\n        console.log(res)\r\n       })\r\n    }\r\n\r\n    async getAllUserPreviewData(){\r\n       let healthDetailData:any;\r\n       let policyDetail:any; \r\n       let emergency_data = await this.getEmergencyDeatails();\r\n       let aboutData = await this.getAboutData();\r\n       let healthData = await this.getHealthDeatails();\r\n       \r\n       if(healthData['health_detail'].length>0){\r\n          healthDetailData = healthData['health_detail'][0];  \r\n       }else{\r\n          healthDetailData=null\r\n       }\r\n       if(aboutData['policies'].length>0){\r\n          policyDetail = aboutData['policies'][0]\r\n       }else{\r\n          policyDetail = null; \r\n       }  \r\n       return { caregiver_contact: emergency_data['caregivers'], contacts: emergency_data['emergency_detail'], health_detail: healthDetailData, policy_details: policyDetail,user: aboutData['user_info']}\r\n\r\n    }\r\n\r\n    async getPatients(){\r\n        let user_id = await this.databaseService.getuserID();\r\n        let sqlUserQuery = SQL_SELECT_ALL_USERS+` WHERE (id='${user_id}' AND role_id=1)`;\r\n        return this.databaseService.getDatabase().then(async (database) => {\r\n          let userData=[];   \r\n          await database.executeSql(sqlUserQuery, []).then((data2) => {\r\n            for (let i = 0; i < data2.rows.length; i++) {\r\n              \r\n                let attribute_json:any = null;                    \r\n                if(data2.rows.item(i).user_picture!=null){\r\n                  attribute_json = JSON.parse(data2.rows.item(i).user_picture); \r\n                }  \r\n              userData.push({ \r\n                  id: data2.rows.item(i).id,\r\n                  name: data2.rows.item(i).name,\r\n                  email: data2.rows.item(i).email,\r\n                  password: data2.rows.item(i).password,\r\n                  mobile_no: data2.rows.item(i).mobile_no,\r\n                  address: data2.rows.item(i).address,\r\n                  country: data2.rows.item(i).country,\r\n                  blood_group: data2.rows.item(i).blood_group,\r\n                  age: data2.rows.item(i).age,\r\n                  user_uid: data2.rows.item(i).user_uid,\r\n                  forgot_password_code: data2.rows.item(i).forgot_password_code,\r\n                  user_picture: attribute_json,\r\n                  active_status: data2.rows.item(i).active_status,\r\n                  role_id: data2.rows.item(i).role_id,\r\n                  created_at: data2.rows.item(i).created_at,\r\n                  updated_at: data2.rows.item(i).updated_at,\r\n                  delete1: data2.rows.item(i).delete1\r\n              })  \r\n            }\r\n          }).catch(res=>{\r\n            console.log(res)\r\n          })\r\n          return { patients: userData };\r\n        }).catch(res=>{\r\n            console.log(res)\r\n        })  \r\n    }\r\n\r\n    async getAllPatients(){\r\n        let user_id = await this.databaseService.getuserID();\r\n        let sqlUsersQuery = SQL_SELECT_ALL_USERS+` WHERE (role_id=1 AND delete1='false')`;\r\n        //let sqlUserQuery = SQL_SELECT_ALL_USERS+` WHERE id=${user_id} AND role_id=1`;\r\n        return this.databaseService.getDatabase().then(async (database) => {\r\n          let userData=[];   \r\n          await database.executeSql(sqlUsersQuery, []).then((data2) => {\r\n            for (let i = 0; i < data2.rows.length; i++) {\r\n             if(data2.rows.item(i).email!=null){                \r\n             \r\n              let attribute_json:any = null;                    \r\n                if(data2.rows.item(i).user_picture!=null){\r\n                  attribute_json = JSON.parse(data2.rows.item(i).user_picture); \r\n                }\r\n              userData.push({ \r\n                  id: data2.rows.item(i).id,\r\n                  name: data2.rows.item(i).name,\r\n                  email: data2.rows.item(i).email,\r\n                  password: data2.rows.item(i).password,\r\n                  mobile_no: data2.rows.item(i).mobile_no,\r\n                  address: data2.rows.item(i).address,\r\n                  country: data2.rows.item(i).country,\r\n                  blood_group: data2.rows.item(i).blood_group,\r\n                  age: data2.rows.item(i).age,\r\n                  user_uid: data2.rows.item(i).user_uid,\r\n                  forgot_password_code: data2.rows.item(i).forgot_password_code,\r\n                  user_picture: attribute_json,\r\n                  active_status: data2.rows.item(i).active_status,\r\n                  role_id: data2.rows.item(i).role_id,\r\n                  created_at: data2.rows.item(i).created_at,\r\n                  updated_at: data2.rows.item(i).updated_at,\r\n                  delete1: data2.rows.item(i).delete1\r\n              })\r\n             }   \r\n            }\r\n          })\r\n          return { patients: userData };\r\n        })   \r\n    }\r\n\r\n    async getPicture_Show(){\r\n       \r\n        let emergency_data = await this.getEmergencyDeatails();\r\n        let aboutData = await this.getAboutData();\r\n        let getAllPatients = await this.getPatients();\r\n\r\n        return { caregiver: emergency_data['caregivers'],patient: getAllPatients['patients'],profile_pic: null,user_info: aboutData['user_info'] };\r\n \r\n    }\r\n\r\n    async getCaregiverData() {\r\n        let user_data = await this.getProfileID();\r\n        let sqlUsersQuery = SQL_SELECT_ALL_USERS+` WHERE (role_id=2 AND delete1='false')`;\r\n        return this.databaseService.getDatabase().then(async (database) => {\r\n            let userData=[];   \r\n            await database.executeSql(sqlUsersQuery, []).then((data2) => {\r\n                for (let i = 0; i < data2.rows.length; i++) {\r\n                    if(data2.rows.item(i).email!=null){                \r\n                        \r\n                        let attribute_json:any = null;                    \r\n                        if(data2.rows.item(i).user_picture!=null){\r\n                        attribute_json = JSON.parse(data2.rows.item(i).user_picture); \r\n                        }\r\n                        userData.push({ \r\n                            id: data2.rows.item(i).id,\r\n                            name: data2.rows.item(i).name,\r\n                            email: data2.rows.item(i).email,\r\n                            password: data2.rows.item(i).password,\r\n                            mobile_no: data2.rows.item(i).mobile_no,\r\n                            address: data2.rows.item(i).address,\r\n                            country: data2.rows.item(i).country,\r\n                            blood_group: data2.rows.item(i).blood_group,\r\n                            age: data2.rows.item(i).age,\r\n                            user_uid: data2.rows.item(i).user_uid,\r\n                            forgot_password_code: data2.rows.item(i).forgot_password_code,\r\n                            user_picture: attribute_json,\r\n                            active_status: data2.rows.item(i).active_status,\r\n                            role_id: data2.rows.item(i).role_id,\r\n                            created_at: data2.rows.item(i).created_at,\r\n                            updated_at: data2.rows.item(i).updated_at,\r\n                            delete1: data2.rows.item(i).delete1\r\n                        })\r\n                    }   \r\n                }\r\n            })\r\n            return { user_info: userData[0] };\r\n        })\r\n    }\r\n\r\n\r\n    async getCurrentUserandPatientsList(){\r\n        let current_user = await this.getCaregiverData();\r\n        let patients_list = await this.getAllPatients();\r\n\r\n        return { user_info: current_user['user_info'] , patient: patients_list['patients'] }\r\n    }\r\n\r\n    async getRecentAppointments(event){\r\n        let user_id = await this.databaseService.getuserID(); \r\n        let eventQuery= ` WHERE (event_type='${event}' AND DATETIME(event_datetime)>=DATETIME('now') AND delete1='false' AND user_id='${user_id}') ORDER BY event_datetime ASC LIMIT 4 OFFSET 0`      \r\n        let sqlSearchEventQuery = SQL_SELECT_ALL_EVENTS+eventQuery;\r\n        \r\n        return this.databaseService.getDatabase().then(database => {\r\n            return database.executeSql(sqlSearchEventQuery, []).then((data) => {\r\n                let events: events[] = [];\r\n                \r\n                for (let i = 0; i < data.rows.length; i++) {\r\n                    let event_json:any = null;\r\n                    let eventAssetsJson:any = null;\r\n                    if (data.rows.item(i).event_options != null) {\r\n                        event_json = JSON.parse(data.rows.item(i).event_options);\r\n                    }\r\n                    if (data.rows.item(i).event_assets != null) {\r\n                        eventAssetsJson = JSON.parse(data.rows.item(i).event_assets);\r\n                    }\r\n                    events.push({\r\n                        id: data.rows.item(i).id,\r\n                        event_id: data.rows.item(i).event_id,\r\n                        event_name: data.rows.item(i).event_name,\r\n                        description: data.rows.item(i).description,\r\n                        value: data.rows.item(i).value,\r\n                        event_datetime: data.rows.item(i).event_datetime,\r\n                        event_type: data.rows.item(i).event_type,\r\n                        event_category: data.rows.item(i).event_category,\r\n                        event_assets: eventAssetsJson,\r\n                        event_options: event_json,\r\n                        user_id: data.rows.item(i).user_id,\r\n                        delete1: data.rows.item(i).delete1,\r\n                        created_at: data.rows.item(i).created_at,\r\n                        updated_at: data.rows.item(i).updated_at\r\n                    });  \r\n                };\r\n                return { appointment_list:events };\r\n            })\r\n        })\r\n    }\r\n\r\n    setQRcode(){\r\n        let setQRcode = null;\r\n        if(localStorage.getItem(\"qrcode\")!=undefined){\r\n            setQRcode = localStorage.getItem(\"qrcode\");\r\n        }\r\n        return setQRcode;\r\n    }\r\n\r\n    getProfileID(){\r\n        let profile_id:any=null;\r\n        if(localStorage.getItem(\"profile_id\")!=undefined){\r\n            profile_id=localStorage.getItem(\"profile_id\");\r\n            return profile_id;\r\n        }\r\n        \r\n        return profile_id\r\n    }\r\n}\r\n"],"sourceRoot":""}