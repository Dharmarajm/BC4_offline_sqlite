{"version":3,"sources":["./src/app/sqlite-database/database_provider.ts"],"names":[],"mappings":"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","file":"default~appointments-appointments-module~doc-visits-doc-visits-module~health-diary-health-diary-modu~5524b6e2-es5.js","sourcesContent":["import { HttpClient } from '@angular/common/http';\r\nimport { Injectable } from '@angular/core';\r\nimport { SQL_SELECT_ALL_CREDENTIALS, Setting, SQL_SELECT_ALL_EVENTS, events, SQL_SELECT_ALL_ENUMS, enum_masters, SQL_SELECT_ALL_HEALTH_DETAILS, SQL_SELECT_ALL_USERS,SQL_SELECT_ALL_EMERGENCY_DATA  } from './database.interface'\r\n\r\nimport { DatabaseProvider } from './database';\r\n/*\r\n  Generated class for the SettingProvider provider.\r\n\r\n  See https://angular.io/guide/dependency-injection for more info on providers\r\n  and Angular DI.\r\n*/\r\n@Injectable()\r\nexport class DataBaseSummaryProvider {\r\n\r\n  constructor(public http: HttpClient,private databaseService: DatabaseProvider) {\r\n    console.log('Hello SettingProvider Provider');\r\n  }\r\n\r\n    getAll(): Promise<Setting[]> {\r\n        return this.databaseService.getDatabase().then(database => {\r\n            return database.executeSql(SQL_SELECT_ALL_CREDENTIALS, []).then((data) => {\r\n                let settings: Setting[] = [];\r\n                for (let i = 0; i < data.rows.length; i++) {\r\n                    settings.push({\r\n                        id: data.rows.item(i).id,\r\n                        email: data.rows.item(i).email,\r\n                        password: data.rows.item(i).password\r\n                    });\r\n                };\r\n                return settings;\r\n            });\r\n        });\r\n    }\r\n\r\n    async getAllEvents(event_type,tab,offset): Promise<any> {\r\n        let checkEvent = await this.checkEventType(event_type,tab,offset);\r\n        let sqlEventQuery = SQL_SELECT_ALL_EVENTS+checkEvent;\r\n        \r\n        return this.databaseService.getDatabase().then(database => {\r\n            return database.executeSql(sqlEventQuery, []).then((data) => {\r\n                let events: events[] = [];\r\n                \r\n                for (let i = 0; i < data.rows.length; i++) {\r\n                    let event_json:any = null;\r\n                    if (data.rows.item(i).skills != '') {\r\n                        event_json = JSON.parse(data.rows.item(i).event_options);\r\n                    }\r\n                    events.push({\r\n                        id: data.rows.item(i).id,\r\n                        event_id:data.rows.item(i).event_id,\r\n                        event_name: data.rows.item(i).event_name,\r\n                        description: data.rows.item(i).description,\r\n                        value: data.rows.item(i).value,\r\n                        event_datetime: data.rows.item(i).event_datetime,\r\n                        event_type: data.rows.item(i).event_type,\r\n                        event_category: data.rows.item(i).event_category,\r\n                        event_assets:data.rows.item(i).event_assets,\r\n                        event_options: event_json,\r\n                        user_id:data.rows.item(i).user_id,\r\n                        sync:data.rows.item(i).sync,\r\n                        created_at: data.rows.item(i).created_at,\r\n                        updated_at: data.rows.item(i).updated_at\r\n                    });  \r\n                };\r\n                return { count:data.rows.length,event_list:events};\r\n            })\r\n        })\r\n    }\r\n\r\n    async getAllEventsSearchList(event_type,search,additionType,offset): Promise<any> {\r\n        let checkEvent = await this.checkEventTypeSearch(event_type,search,additionType,offset);\r\n        let sqlSearchEventQuery = SQL_SELECT_ALL_EVENTS+checkEvent;\r\n        \r\n        return this.databaseService.getDatabase().then(database => {\r\n            return database.executeSql(sqlSearchEventQuery, []).then((data) => {\r\n                let events: events[] = [];\r\n                \r\n                for (let i = 0; i < data.rows.length; i++) {\r\n                    let event_json:any = null;\r\n                    if (data.rows.item(i).skills != '') {\r\n                        event_json = JSON.parse(data.rows.item(i).event_options);\r\n                    }\r\n                    events.push({\r\n                        id: data.rows.item(i).id,\r\n                        event_id: data.rows.item(i).event_id,\r\n                        event_name: data.rows.item(i).event_name,\r\n                        description: data.rows.item(i).description,\r\n                        value: data.rows.item(i).value,\r\n                        event_datetime: data.rows.item(i).event_datetime,\r\n                        event_type: data.rows.item(i).event_type,\r\n                        event_category: data.rows.item(i).event_category,\r\n                        event_assets: data.rows.item(i).event_assets,\r\n                        event_options: event_json,\r\n                        user_id: data.rows.item(i).user_id,\r\n                        sync: data.rows.item(i).sync,\r\n                        created_at: data.rows.item(i).created_at,\r\n                        updated_at: data.rows.item(i).updated_at\r\n                    });  \r\n                };\r\n                return { count:data.rows.length,event_list:events };\r\n            })\r\n        })\r\n    }\r\n\r\n    checkEventType(event,tab,offset) {\r\n        \r\n        let eventQuery:any;\r\n        //let nowDate = new Date().toJSON()\r\n        if(event=='appointment' && tab=='New'){\r\n            return eventQuery= ` WHERE (event_type='${event}' AND DATETIME(event_datetime)>=DATETIME('now')) ORDER BY event_datetime ASC LIMIT 10 OFFSET ${offset}`      \r\n        }else if(event=='appointment' && tab=='history'){\r\n            return eventQuery= ` WHERE (event_type='${event}' AND DATETIME(event_datetime)<DATETIME('now')) ORDER BY event_datetime ASC LIMIT 10 OFFSET ${offset}`\r\n        }else if(event=='health_diary' || event=='doc_visit'){\r\n            return eventQuery= ` WHERE event_type='${event}' ORDER BY created_at DESC LIMIT 10 OFFSET ${offset}`\r\n        }else{\r\n            return eventQuery= ` WHERE event_type='${event}' ORDER BY event_datetime DESC LIMIT 10 OFFSET ${offset}`\r\n        }\r\n        \r\n    }\r\n\r\n    checkEventTypeSearch(event,search,type,offset) {\r\n        let eventSearchQuery:any;\r\n        //let nowDate = new Date().toJSON()\r\n        if(event=='appointment' && type=='New'){\r\n            \r\n            return eventSearchQuery= ` WHERE ((event_name LIKE '%${search}%') OR (description LIKE '%${search}%') OR (event_category LIKE '%${search}%')) AND (event_type='${event}' AND DATETIME(event_datetime)>=DATETIME('now')) ORDER BY event_datetime ASC LIMIT 10 OFFSET ${offset}`\r\n            \r\n        }else if(event=='appointment' && type=='history'){\r\n            \r\n            return eventSearchQuery= ` WHERE ((event_name LIKE '%${search}%') OR (description LIKE '%${search}%') OR (event_category LIKE '%${search}%')) AND (event_type='${event}' AND DATETIME(event_datetime)<DATETIME('now')) ORDER BY event_datetime ASC LIMIT 10 OFFSET ${offset}`\r\n        }else if(event=='health_diary' || event=='doc_visit'){\r\n            return eventSearchQuery= ` WHERE ((event_name LIKE '%${search}%') OR (description LIKE '%${search}%') OR (event_category LIKE '%${search}%')) AND event_type='${event}' ORDER BY created_at DESC LIMIT 10 OFFSET ${offset}`\r\n        }else{\r\n            return eventSearchQuery= ` WHERE ((event_name LIKE '%${search}%') OR (description LIKE '%${search}%') OR (event_category LIKE '%${search}%')) AND event_type='${event}' ORDER BY event_datetime DESC LIMIT 10 OFFSET ${offset}`\r\n        }\r\n        \r\n    }\r\n\r\n    getEnumMasters(name): Promise<any> {\r\n        let sqlEnumQuery = SQL_SELECT_ALL_ENUMS+` WHERE category_name='${name}'`;\r\n        \r\n        return this.databaseService.getDatabase().then(database => {\r\n            return database.executeSql(sqlEnumQuery, []).then((data) => {\r\n                \r\n                let Enums = [];\r\n               \r\n                for (let i = 0; i < data.rows.length; i++) {\r\n                    Enums.push(data.rows.item(i).name);\r\n                };\r\n                \r\n                return { count: data.rows.length, enum_masters: Enums };\r\n            })\r\n        })\r\n    }\r\n\r\n    diaryRecordFilter(data): Promise<any> {\r\n      let sqlSearchEventQuery = SQL_SELECT_ALL_EVENTS+` WHERE (created_at BETWEEN DATE('${data[\"from_date\"]}') AND DATE('${data[\"end_date\"]}','+1 DAY')) AND event_type='${data[\"event_type\"]}' ORDER BY created_at DESC LIMIT 10 OFFSET 0`;\r\n        \r\n        return this.databaseService.getDatabase().then(database => {\r\n            return database.executeSql(sqlSearchEventQuery, []).then((data) => {\r\n                let events: events[] = [];\r\n                \r\n                for (let i = 0; i < data.rows.length; i++) {\r\n                    let event_json:any = null;\r\n                    if (data.rows.item(i).skills != '') {\r\n                        event_json = JSON.parse(data.rows.item(i).event_options);\r\n                    }\r\n                    events.push({\r\n                        id: data.rows.item(i).id,\r\n                        event_id: data.rows.item(i).event_id,\r\n                        event_name: data.rows.item(i).event_name,\r\n                        description: data.rows.item(i).description,\r\n                        value: data.rows.item(i).value,\r\n                        event_datetime: data.rows.item(i).event_datetime,\r\n                        event_type: data.rows.item(i).event_type,\r\n                        event_category: data.rows.item(i).event_category,\r\n                        event_assets: data.rows.item(i).event_assets,\r\n                        event_options: event_json,\r\n                        user_id: data.rows.item(i).user_id,\r\n                        sync: data.rows.item(i).sync,\r\n                        created_at: data.rows.item(i).created_at,\r\n                        updated_at: data.rows.item(i).updated_at\r\n                    });  \r\n                };\r\n                return { count: data.rows.length, event_list: events };\r\n            })\r\n        })     \r\n    }\r\n\r\n    async getAboutData(): Promise<any>{\r\n        let user_id = await this.databaseService.getuserID(); \r\n        let sqlHealthQuery = SQL_SELECT_ALL_HEALTH_DETAILS+` WHERE name='policy'`;\r\n        let sqlUserQuery = SQL_SELECT_ALL_USERS+` WHERE id=${user_id} AND role_id=1`;\r\n        return this.databaseService.getDatabase().then(async(database) => {\r\n            \r\n            let healthData=[];\r\n            let userData=[];\r\n\r\n            await database.executeSql(sqlHealthQuery, []).then((data1) => {\r\n              for (let i = 0; i < data1.rows.length; i++) {\r\n                let event_json:any = null;\r\n                if (data1.rows.item(i).attribute_name_value != '') {\r\n                    event_json = JSON.parse(data1.rows.item(i).attribute_name_value);\r\n                }  \r\n                healthData.push({ \r\n                    id: data1.rows.item(i).id, \r\n                    health_id: data1.rows.item(i).health_id, \r\n                    name: data1.rows.item(i).name, \r\n                    attribute_name_value: event_json, \r\n                    user_id: data1.rows.item(i).user_id, \r\n                    created_at: data1.rows.item(i).created_at, \r\n                    updated_at: data1.rows.item(i).updated_at \r\n                })  \r\n              }\r\n            })\r\n           \r\n            await database.executeSql(sqlUserQuery, []).then((data2) => {\r\n              for (let i = 0; i < data2.rows.length; i++) {\r\n                let attribute_json = JSON.parse(data2.rows.item(i).user_picture);  \r\n                userData.push({ \r\n                    id: data2.rows.item(i).id,\r\n                    name: data2.rows.item(i).name,\r\n                    email: data2.rows.item(i).email,\r\n                    password: data2.rows.item(i).password,\r\n                    mobile_no: data2.rows.item(i).mobile_no,\r\n                    address: data2.rows.item(i).address,\r\n                    country: data2.rows.item(i).country,\r\n                    blood_group: data2.rows.item(i).blood_group,\r\n                    age: data2.rows.item(i).age,\r\n                    user_uid: data2.rows.item(i).user_uid,\r\n                    forgot_password_code: data2.rows.item(i).forgot_password_code,\r\n                    user_picture: attribute_json,\r\n                    active_status: data2.rows.item(i).active_status,\r\n                    role_id: data2.rows.item(i).role_id,\r\n                    created_at: data2.rows.item(i).created_at,\r\n                    updated_at: data2.rows.item(i).updated_at\r\n                })  \r\n              }\r\n            })\r\n\r\n            return { policies: healthData, user_info: userData[0], qrcode_image: null };\r\n\r\n        })    \r\n\r\n\r\n    }\r\n\r\n    async getHealthDeatails(): Promise<any> {\r\n       //let user_id = await this.databaseService.getuserID(); \r\n       let sqlHealthQuery = SQL_SELECT_ALL_HEALTH_DETAILS+` WHERE name='health'`;\r\n       return this.databaseService.getDatabase().then(async(database) => {\r\n         return database.executeSql(sqlHealthQuery, []).then((data) => {\r\n            let healthData=[];\r\n            for (let i = 0; i < data.rows.length; i++) {\r\n                let event_json:any = null;\r\n                if (data.rows.item(i).attribute_name_value != '') {\r\n                    event_json = JSON.parse(data.rows.item(i).attribute_name_value);\r\n                }  \r\n                healthData.push({ \r\n                    id: data.rows.item(i).id, \r\n                    health_id: data.rows.item(i).health_id, \r\n                    name: data.rows.item(i).name, \r\n                    attribute_name_value: event_json, \r\n                    user_id: data.rows.item(i).user_id, \r\n                    created_at: data.rows.item(i).created_at, \r\n                    updated_at: data.rows.item(i).updated_at \r\n                })  \r\n              }\r\n\r\n              return { health_detail: healthData };\r\n         })  \r\n       })\r\n    }\r\n\r\n    getEmergencyDeatails(): Promise<any> {\r\n       let sqlEmergeQuery = SQL_SELECT_ALL_EMERGENCY_DATA;\r\n       let sqlUsersQuery = SQL_SELECT_ALL_USERS+` WHERE role_id=2`;\r\n       return this.databaseService.getDatabase().then(async(database) => {\r\n        let emergencyContacts = []; \r\n        let careGiverData=[];\r\n        await database.executeSql(sqlEmergeQuery, []).then((data) => {\r\n            for (let i = 0; i < data.rows.length; i++) {\r\n                emergencyContacts.push({\r\n                id: data.rows.item(i).id,\r\n                emergency_id: data.rows.item(i).emergency_id,\r\n                contact_name: data.rows.item(i).contact_name,\r\n                emergency_no: data.rows.item(i).emergency_no,\r\n                user_type: data.rows.item(i).user_type,\r\n                user_id: data.rows.item(i).user_id,\r\n                created_at: data.rows.item(i).created_at,\r\n                updated_at: data.rows.item(i).updated_at,\r\n                });\r\n            } \r\n         })\r\n         await database.executeSql(sqlUsersQuery, []).then((data1) => {\r\n            for (let i = 0; i < data1.rows.length; i++) {\r\n              if(data1.rows.item(i).email!=null){ \r\n                let attribute_json = JSON.parse(data1.rows.item(i).user_picture);\r\n                careGiverData.push({\r\n                    id: data1.rows.item(i).id,\r\n                    name: data1.rows.item(i).name,\r\n                    email: data1.rows.item(i).email,\r\n                    password: data1.rows.item(i).password,\r\n                    mobile_no: data1.rows.item(i).mobile_no,\r\n                    address: data1.rows.item(i).address,\r\n                    country: data1.rows.item(i).country,\r\n                    blood_group: data1.rows.item(i).blood_group,\r\n                    age: data1.rows.item(i).age,\r\n                    user_uid: data1.rows.item(i).user_uid,\r\n                    forgot_password_code: data1.rows.item(i).forgot_password_code,\r\n                    user_picture: attribute_json,\r\n                    active_status: data1.rows.item(i).active_status,\r\n                    role_id: data1.rows.item(i).role_id,\r\n                    created_at: data1.rows.item(i).created_at,\r\n                    updated_at: data1.rows.item(i).updated_at\r\n                });\r\n              } \r\n            } \r\n         })\r\n         return { caregiver_count: careGiverData.length ,caregivers: careGiverData,emergency_contact_count: emergencyContacts.length,emergency_detail: emergencyContacts};  \r\n       })\r\n    }\r\n\r\n    async getAllUserPreviewData(){\r\n       let healthDetailData:any;\r\n       let policyDetail:any; \r\n       let emergency_data = await this.getEmergencyDeatails();\r\n       let aboutData = await this.getAboutData();\r\n       let healthData = await this.getHealthDeatails();\r\n       \r\n       if(healthData['health_detail'].length>0){\r\n          healthDetailData = healthData['health_detail'][0];  \r\n       }else{\r\n          healthDetailData=null\r\n       }\r\n       if(aboutData['policies'].length>0){\r\n          policyDetail = aboutData['policies'][0]\r\n       }else{\r\n          policyDetail = null; \r\n       }  \r\n       return { caregiver_contact: emergency_data['caregivers'], contacts: emergency_data['emergency_detail'], health_detail: healthDetailData, policy_details: policyDetail,user: aboutData['user_info']}\r\n\r\n    }\r\n\r\n}\r\n"],"sourceRoot":""}