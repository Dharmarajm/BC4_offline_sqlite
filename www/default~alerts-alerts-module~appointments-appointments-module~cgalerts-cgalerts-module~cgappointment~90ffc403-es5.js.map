{"version":3,"sources":["./src/app/sqlite-database/database_provider.ts"],"names":[],"mappings":"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","file":"default~alerts-alerts-module~appointments-appointments-module~cgalerts-cgalerts-module~cgappointment~90ffc403-es5.js","sourcesContent":["import { HttpClient } from '@angular/common/http';\r\nimport { Injectable } from '@angular/core';\r\nimport { SQL_SELECT_ALL_CREDENTIALS, Setting, SQL_SELECT_ALL_EVENTS, events, SQL_SELECT_ALL_ENUMS, enum_masters, SQL_SELECT_ALL_HEALTH_DETAILS, SQL_SELECT_ALL_USERS,SQL_SELECT_ALL_EMERGENCY_DATA  } from './database.interface'\r\nimport { of,from } from 'rxjs';\r\nimport { concatMap, groupBy, map, mergeMap, reduce, toArray } from 'rxjs/operators';\r\nimport { formatDate } from '@angular/common';\r\nimport { DatabaseProvider } from './database';\r\n/*\r\n  Generated class for the SettingProvider provider.\r\n\r\n  See https://angular.io/guide/dependency-injection for more info on providers\r\n  and Angular DI.\r\n*/\r\n@Injectable()\r\nexport class DataBaseSummaryProvider {\r\n\r\n  constructor(public http: HttpClient,private databaseService: DatabaseProvider) {\r\n    console.log('Hello SettingProvider Provider');\r\n  }\r\n\r\n    getAll(): Promise<Setting[]> {\r\n        return this.databaseService.getDatabase().then(database => {\r\n            return database.executeSql(SQL_SELECT_ALL_CREDENTIALS, []).then((data) => {\r\n                let settings: Setting[] = [];\r\n                for (let i = 0; i < data.rows.length; i++) {\r\n                    settings.push({\r\n                        id: data.rows.item(i).id,\r\n                        email: data.rows.item(i).email,\r\n                        password: data.rows.item(i).password\r\n                    });\r\n                };\r\n                return settings;\r\n            });\r\n        });\r\n    }\r\n\r\n    async getAllEvents(event_type,tab,offset): Promise<any> {\r\n        let checkEvent = await this.checkEventType(event_type,tab,offset);\r\n        let sqlEventQuery = SQL_SELECT_ALL_EVENTS+checkEvent;\r\n        \r\n        return this.databaseService.getDatabase().then(database => {\r\n            return database.executeSql(sqlEventQuery, []).then((data) => {\r\n                let events: events[] = [];\r\n                \r\n                for (let i = 0; i < data.rows.length; i++) {\r\n                    let event_json:any = null;\r\n                    let eventAssetsJson:any = null;\r\n                    if (data.rows.item(i).event_options != null) {\r\n                        event_json = JSON.parse(data.rows.item(i).event_options);\r\n                    }\r\n                    if (data.rows.item(i).event_assets != null) {\r\n                        eventAssetsJson = JSON.parse(data.rows.item(i).event_assets);\r\n                    }\r\n                    events.push({\r\n                        id: data.rows.item(i).id,\r\n                        event_id:data.rows.item(i).event_id,\r\n                        event_name: data.rows.item(i).event_name,\r\n                        description: data.rows.item(i).description,\r\n                        value: data.rows.item(i).value,\r\n                        event_datetime: data.rows.item(i).event_datetime,\r\n                        event_type: data.rows.item(i).event_type,\r\n                        event_category: data.rows.item(i).event_category,\r\n                        event_assets: eventAssetsJson,\r\n                        event_options: event_json,\r\n                        user_id:data.rows.item(i).user_id,\r\n                        delete1:data.rows.item(i).delete1,\r\n                        created_at: data.rows.item(i).created_at,\r\n                        updated_at: data.rows.item(i).updated_at\r\n                    });  \r\n                };\r\n                return { count:data.rows.length,event_list:events};\r\n            })\r\n        })\r\n    }\r\n\r\n    async getAllEventsSearchList(event_type,search,additionType,offset): Promise<any> {\r\n        let checkEvent = await this.checkEventTypeSearch(event_type,search,additionType,offset);\r\n        let sqlSearchEventQuery = SQL_SELECT_ALL_EVENTS+checkEvent;\r\n        \r\n        return this.databaseService.getDatabase().then(database => {\r\n            return database.executeSql(sqlSearchEventQuery, []).then((data) => {\r\n                let events: events[] = [];\r\n                \r\n                for (let i = 0; i < data.rows.length; i++) {\r\n                    let event_json:any = null;\r\n                    let eventAssetsJson:any = null;\r\n                    if (data.rows.item(i).event_options != null) {\r\n                        event_json = JSON.parse(data.rows.item(i).event_options);\r\n                    }\r\n                    if (data.rows.item(i).event_assets != null) {\r\n                        eventAssetsJson = JSON.parse(data.rows.item(i).event_assets);\r\n                    }\r\n                    events.push({\r\n                        id: data.rows.item(i).id,\r\n                        event_id: data.rows.item(i).event_id,\r\n                        event_name: data.rows.item(i).event_name,\r\n                        description: data.rows.item(i).description,\r\n                        value: data.rows.item(i).value,\r\n                        event_datetime: data.rows.item(i).event_datetime,\r\n                        event_type: data.rows.item(i).event_type,\r\n                        event_category: data.rows.item(i).event_category,\r\n                        event_assets: eventAssetsJson,\r\n                        event_options: event_json,\r\n                        user_id: data.rows.item(i).user_id,\r\n                        delete1: data.rows.item(i).delete1,\r\n                        created_at: data.rows.item(i).created_at,\r\n                        updated_at: data.rows.item(i).updated_at\r\n                    });  \r\n                };\r\n                return { count:data.rows.length,event_list:events };\r\n            })\r\n        })\r\n    }\r\n\r\n    async filterVitalHistory(event_type,event_name,from_date,end_date,vital_page_offset): Promise<any> {\r\n        let checkEvent = await this.checkEventType(event_type,'pagefilter',vital_page_offset,from_date,end_date,null,event_name);\r\n        let sqlSearchEventQuery = SQL_SELECT_ALL_EVENTS+checkEvent;\r\n       console.log(sqlSearchEventQuery)\r\n        return this.databaseService.getDatabase().then(database => {\r\n            return database.executeSql(sqlSearchEventQuery, []).then((data) => {\r\n                let events: events[] = [];\r\n                \r\n                for (let i = 0; i < data.rows.length; i++) {\r\n                    let event_json:any = null;\r\n                    let eventAssetsJson:any = null;\r\n                    if (data.rows.item(i).event_options != null) {\r\n                        event_json = JSON.parse(data.rows.item(i).event_options);\r\n                    }\r\n                    if (data.rows.item(i).event_assets != null) {\r\n                        eventAssetsJson = JSON.parse(data.rows.item(i).event_assets);\r\n                    }\r\n                    events.push({\r\n                        id: data.rows.item(i).id,\r\n                        event_id:data.rows.item(i).event_id,\r\n                        event_name: data.rows.item(i).event_name,\r\n                        description: data.rows.item(i).description,\r\n                        value: data.rows.item(i).value,\r\n                        event_datetime: data.rows.item(i).event_datetime,\r\n                        event_type: data.rows.item(i).event_type,\r\n                        event_category: data.rows.item(i).event_category,\r\n                        event_assets: eventAssetsJson,\r\n                        event_options: event_json,\r\n                        user_id:data.rows.item(i).user_id,\r\n                        delete1:data.rows.item(i).delete1,\r\n                        created_at: data.rows.item(i).created_at,\r\n                        updated_at: data.rows.item(i).updated_at\r\n                    });  \r\n                };\r\n                return { count:data.rows.length,events:events};\r\n            })\r\n        })        \r\n\r\n    }\r\n\r\n    async getVitalEvents(id,from_date,end_date,event_type,analytics?,event_name?): Promise<any> {\r\n        let checkEvent = await this.checkEventType(event_type,'filter',0,from_date,end_date,analytics,event_name);\r\n        let sqlSearchEventQuery = SQL_SELECT_ALL_EVENTS+checkEvent;\r\n        console.log(sqlSearchEventQuery)\r\n        return this.databaseService.getDatabase().then(database => {\r\n            return database.executeSql(sqlSearchEventQuery, []).then((data) => {\r\n                console.log(data)\r\n                let events: events[] = [];\r\n                \r\n                for (let i = 0; i < data.rows.length; i++) {\r\n                    let event_json:any = null;\r\n                    let eventAssetsJson:any = null;\r\n                    if (data.rows.item(i).event_options != null) {\r\n                        event_json = JSON.parse(data.rows.item(i).event_options);\r\n                    }\r\n                    if (data.rows.item(i).event_assets != null) {\r\n                        eventAssetsJson = JSON.parse(data.rows.item(i).event_assets);\r\n                    }\r\n                    events.push({\r\n                        id: data.rows.item(i).id,\r\n                        event_id:data.rows.item(i).event_id,\r\n                        event_name: data.rows.item(i).event_name,\r\n                        description: data.rows.item(i).description,\r\n                        value: data.rows.item(i).value,\r\n                        event_datetime: data.rows.item(i).event_datetime,\r\n                        event_type: data.rows.item(i).event_type,\r\n                        event_category: data.rows.item(i).event_category,\r\n                        event_assets: eventAssetsJson,\r\n                        event_options: event_json,\r\n                        user_id:data.rows.item(i).user_id,\r\n                        delete1:data.rows.item(i).delete1,\r\n                        created_at: data.rows.item(i).created_at,\r\n                        updated_at: data.rows.item(i).updated_at\r\n                    });  \r\n                };\r\n                return { count:data.rows.length,event_list:events};\r\n            })\r\n        })        \r\n\r\n    }\r\n\r\n\r\n\r\n    filterVitalEventNameList(id,from_date,end,type){\r\n        return this.getVitalEvents(id,from_date,end,type).then(response => {\r\n          let data = response['event_list'];\r\n           \r\n            let value = [];\r\n            const example = from(data).pipe(\r\n            groupBy(person =>  person['event_name']),\r\n            mergeMap(group => from(group).pipe(toArray()))\r\n            ).subscribe(val => {\r\n                console.log(val)\r\n                if(val){\r\n                 value.push(val[0]['event_name']); \r\n                }  \r\n             \r\n            })\r\n\r\n            return { events : value }\r\n\r\n        })\r\n    }\r\n\r\n\r\n    async expenseCalculation(){\r\n        let user_id = await this.databaseService.getuserID();\r\n        let sqlUserQuery = SQL_SELECT_ALL_USERS+` WHERE id='${user_id}'`\r\n        return this.databaseService.getDatabase().then(database => {\r\n            return database.executeSql(sqlUserQuery, []).then(async (data) => {\r\n                console.log(data.rows.item(0))\r\n                let getUserData = data.rows.item(0);\r\n                let joinMonth =  getUserData.created_at || null;\r\n                console.log(joinMonth)\r\n                let currentDate = new Date();\r\n                console.log(currentDate)\r\n                var y = currentDate.getFullYear();\r\n                var m = currentDate.getMonth();\r\n                let lastDate = currentDate;\r\n                lastDate.setDate(lastDate.getDate() + 1);\r\n                let getfirst_month = new Date(y, 0, 31);\r\n                let setfirst_month = getfirst_month.toJSON();\r\n                let currentMonth = new Date(y, m, 1);\r\n                let first_day = new Date(y, 0, 1);\r\n                var fy = first_day.getFullYear();\r\n                var fm = first_day.getMonth();\r\n                let no_of_months = ( y * 12 + m) - ( fy * 12 + fm)\r\n                console.log(no_of_months)\r\n                console.log(joinMonth!=null , joinMonth <= setfirst_month , joinMonth,setfirst_month)\r\n                //if(joinMonth!=null && joinMonth <= setfirst_month){\r\n                    let CurrentMonthStart = currentMonth.toJSON();\r\n                    console.log(CurrentMonthStart)\r\n                    let CurrentMonthEnd = lastDate.toJSON();\r\n                    console.log(CurrentMonthEnd)      \r\n                    let sqlCurrentMonthExpQuery =  `SELECT SUM(value) FROM events WHERE (event_type='expense' AND delete1='false' AND user_id='${user_id}' AND (event_datetime BETWEEN DATE('${CurrentMonthStart}') AND DATE('${CurrentMonthEnd}')))`\r\n                    console.log(sqlCurrentMonthExpQuery)\r\n                    let getResponseOfMonthExp = await this.expenseCalculateValue(sqlCurrentMonthExpQuery);\r\n                    console.log(getResponseOfMonthExp)\r\n                    \r\n                    for (let i = 0; i < getResponseOfMonthExp.rows.length; i++) {\r\n                        console.log(getResponseOfMonthExp.rows.item(i))\r\n                    }\r\n                    let firstDayOfYear = first_day.toJSON();\r\n                    console.log(firstDayOfYear)\r\n                    let lastDayofYear = lastDate.toJSON();\r\n                    console.log(lastDayofYear)\r\n                    let sqlCurrentYearExpQuery = `SELECT SUM(value) FROM events WHERE (event_type='expense' AND delete1='false' AND user_id='${user_id}' AND (event_datetime BETWEEN DATE('${firstDayOfYear}') AND DATE('${lastDayofYear}')))`\r\n                    console.log(sqlCurrentYearExpQuery)\r\n                    let getResponseOfYearExp = await this.expenseCalculateValue(sqlCurrentYearExpQuery);\r\n                    console.log(getResponseOfYearExp)\r\n\r\n                    for (let j = 0; j < getResponseOfYearExp.rows.length; j++) {\r\n                        console.log(getResponseOfYearExp.rows.item(j))\r\n                    }\r\n                //}\r\n\r\n                \r\n                return { CurrentMonth : \"\", Yearly: \"\", status: \"\" };\r\n            })\r\n            \r\n        })\r\n        \r\n    }\r\n\r\n    async expenseCalculateValue(query){\r\n        return this.databaseService.getDatabase().then(database => {\r\n            return database.executeSql(query, []).then((data) => {\r\n              return data;\r\n            }).catch(e=>{console.log(e)})\r\n        })        \r\n    }\r\n\r\n    async expense_cals_chart(){\r\n      let getAllEventsData = await this.getAllExpenses();\r\n      let data = getAllEventsData['event_list'];\r\n      \r\n      let value = [];\r\n      const example = from(data).pipe(\r\n      groupBy(person =>  person['event_name']),\r\n      mergeMap(group => from(group).pipe(toArray()))\r\n      ).subscribe(val => {\r\n        console.log(val)\r\n      })\r\n\r\n      return { Currentmonth : '', Totalyear: '', Year: '' };\r\n    }\r\n\r\n    async getAllExpenses(){\r\n        let user_id = await this.databaseService.getuserID();\r\n        let sqlSearchEventQuery = SQL_SELECT_ALL_EVENTS+` WHERE (event_type='expense' AND delete1='false' AND user_id='${user_id}')`\r\n        return this.databaseService.getDatabase().then(database => {\r\n            return database.executeSql(sqlSearchEventQuery, []).then((data) => {\r\n                console.log(data)\r\n                let events: events[] = [];\r\n                \r\n                for (let i = 0; i < data.rows.length; i++) {\r\n                    console.log(data.rows.item(i))\r\n                    let event_json:any = null;\r\n                    let eventAssetsJson:any = null;\r\n                    if (data.rows.item(i).event_options != null) {\r\n                        event_json = JSON.parse(data.rows.item(i).event_options);\r\n                    }\r\n                    if (data.rows.item(i).event_assets != null) {\r\n                        eventAssetsJson = JSON.parse(data.rows.item(i).event_assets);\r\n                    }\r\n                    events.push({\r\n                        id: data.rows.item(i).id,\r\n                        event_id:data.rows.item(i).event_id,\r\n                        event_name: data.rows.item(i).event_name,\r\n                        description: data.rows.item(i).description,\r\n                        value: data.rows.item(i).value,\r\n                        event_datetime: data.rows.item(i).event_datetime,\r\n                        event_type: data.rows.item(i).event_type,\r\n                        event_category: data.rows.item(i).event_category,\r\n                        event_assets: eventAssetsJson,\r\n                        event_options: event_json,\r\n                        user_id:data.rows.item(i).user_id,\r\n                        delete1:data.rows.item(i).delete1,\r\n                        created_at: data.rows.item(i).created_at,\r\n                        updated_at: data.rows.item(i).updated_at\r\n                    });  \r\n                };\r\n                return { count:data.rows.length,event_list:events};\r\n            })\r\n        })        \r\n    }\r\n\r\n\r\n\r\n    async currentUserData(data){\r\n        let events: events[] = [];\r\n        for (let i = 0; i < data.rows.length; i++) { \r\n                let event_json:any = null;\r\n                let eventAssetsJson:any = null;\r\n                if (data.rows.item(i).event_options != null) {\r\n                    event_json = JSON.parse(data.rows.item(i).event_options);\r\n                }\r\n                if (data.rows.item(i).event_assets != null) {\r\n                    eventAssetsJson = JSON.parse(data.rows.item(i).event_assets);\r\n                }\r\n            events.push({\r\n                id: data.rows.item(i).id,\r\n                event_id:data.rows.item(i).event_id,\r\n                event_name: data.rows.item(i).event_name,\r\n                description: data.rows.item(i).description,\r\n                value: data.rows.item(i).value,\r\n                event_datetime: data.rows.item(i).event_datetime,\r\n                event_type: data.rows.item(i).event_type,\r\n                event_category: data.rows.item(i).event_category,\r\n                event_assets: eventAssetsJson,\r\n                event_options: event_json,\r\n                user_id:data.rows.item(i).user_id,\r\n                delete1:data.rows.item(i).delete1,\r\n                created_at: data.rows.item(i).created_at,\r\n                updated_at: data.rows.item(i).updated_at\r\n            });\r\n        }\r\n     \r\n     return events;\r\n    }\r\n\r\n    expenseDatefilter(id,from_date,end,type){\r\n        return this.getVitalEvents(id,from_date,end,type,'expense').then(response => {\r\n            let data = response['event_list'];\r\n\r\n            let value = [];\r\n            const example = from(data).pipe(\r\n            groupBy(person =>  person['event_name']),\r\n            mergeMap(group => from(group).pipe(toArray()))\r\n            ).subscribe(val => {\r\n                console.log(val)\r\n                if(val){\r\n                 value.push(val[0]['event_name']); \r\n                }  \r\n             \r\n            })\r\n\r\n            return { events : value }\r\n        })    \r\n    }\r\n\r\n    ExpenseViewSummary(from_date,end,type,event_name?,analytics?){\r\n        return this.getVitalEvents('1',from_date,end,type,analytics,event_name).then(response => {\r\n            let data = response['event_list'];\r\n            let fromDate =  formatDate(from_date, 'yyyy-MM-dd', 'en-US');\r\n            let end_date =  formatDate(end, 'yyyy-MM-dd', 'en-US');\r\n            let value = [];\r\n            let vital = {}\r\n            const example = from(data).pipe(\r\n            groupBy(person =>  person['event_name']),\r\n            mergeMap(group => from(group).pipe(toArray()))\r\n            ).subscribe(val => {\r\n                console.log(val)\r\n                vital[`${val[0]['event_name']}`]=val;\r\n            })\r\n\r\n            return { from_date : fromDate ,end_date: end_date, expense:  vital} \r\n        })\r\n    }\r\n\r\n    vitalFilterAnalytics(id,data){\r\n        let params = data;\r\n        return this.getVitalEvents(id,params['from_date'],params['end_date'],'vital','analytics',params['event_name']).then(response => {\r\n            console.log(response)\r\n            let data = response['event_list'];\r\n            \r\n            let value = {}\r\n            const example = from(data).pipe(\r\n                groupBy(person =>  person['event_name']),  //,person =>  person.event_category\r\n                mergeMap(group => group.pipe(toArray())),\r\n                mergeMap((array) => {// Take each from above array and group each array by manDate\r\n                  return from(array).pipe(groupBy(\r\n                    val => formatDate(val['event_datetime'], 'yyyy-MM-dd', 'en-US'),\r\n                    ),\r\n                    mergeMap(group => {\r\n                      return group.pipe(toArray()); // return the group values as Arrays\r\n                    })\r\n                  );\r\n                }),\r\n                mergeMap((array) => {// Take each from above array and group each array by manDate\r\n                  return from(array).pipe(groupBy(\r\n                    val => val['event_category'],\r\n                    ),\r\n                    mergeMap(group => {\r\n                      return group.pipe(toArray()); // return the group values as Arrays\r\n                    })\r\n                  );\r\n                }),map((val) => {  //For each array returned , calculate the sum and map it to the Object you wanted\r\n                 \r\n                  return { event_name: val[0]['event_name'], date: val[0]['event_datetime'], event_category: val[0]['event_category'], data:val }\r\n                })\r\n              ).subscribe(val => {\r\n               \r\n               console.log(val,\"test\")\r\n                 let event_name = `${val['event_name']}`;\r\n                 let date = formatDate(val.date, 'yyyy-MM-dd', 'en-US');\r\n                 let event_category = val.event_category;\r\n                \r\n                 value[`${event_name}`][`${date}`][`${event_category}`] = val['data'];\r\n              })\r\n  \r\n              return value;\r\n  \r\n          })\r\n    }\r\n\r\n    async checkEventType(event,tab,offset,from_date?,end_date?,analytics?,event_name?) {\r\n        console.log(from_date,end_date)\r\n        let startDate = null;\r\n        let endDate = null;\r\n        if(from_date!=undefined && end_date!=undefined){\r\n            let string1 = from_date.toString();\r\n            console.log(string1)\r\n            let string2 = end_date.toString();\r\n            console.log(string2)\r\n            let Date1 = new Date(string1);\r\n            console.log(Date1)\r\n            let Date2 = new Date(string2);\r\n            Date2.setDate(Date2.getDate() + 1);\r\n            console.log(Date2)\r\n            startDate = formatDate(Date1, 'yyyy-MM-dd', 'en-US');\r\n            console.log(startDate)\r\n            endDate = formatDate(Date2, 'yyyy-MM-dd', 'en-US');\r\n            console.log(endDate)\r\n        }\r\n    \r\n        let eventQuery:any;\r\n        let event_nameArray = null;\r\n        if(event_name!=null && event_name.length>0){\r\n            event_nameArray = event_name.toString();\r\n        }\r\n        \r\n        let user_id = await this.databaseService.getuserID();\r\n        //let nowDate = new Date().toJSON()\r\n        if(event=='appointment' && tab=='New'){\r\n            return eventQuery= ` WHERE (event_type='${event}' AND DATETIME(event_datetime)>=DATETIME('now') AND delete1='false' AND user_id='${user_id}') ORDER BY event_datetime ASC LIMIT 10 OFFSET ${offset}`      \r\n        }else if(event=='appointment' && tab=='history'){\r\n            return eventQuery= ` WHERE (event_type='${event}' AND DATETIME(event_datetime)<DATETIME('now') AND delete1='false' AND user_id='${user_id}') ORDER BY event_datetime ASC LIMIT 10 OFFSET ${offset}`\r\n        }else if(event=='health_diary' || event=='doc_visit'){\r\n            return eventQuery= ` WHERE (event_type='${event}' AND delete1='false' AND user_id='${user_id}') ORDER BY created_at DESC LIMIT 10 OFFSET ${offset}`\r\n        }else if(event=='vital' && tab == 'New'){\r\n            return eventQuery= ` WHERE (event_type='${event}' AND delete1='false' AND user_id='${user_id}') ORDER BY event_datetime DESC`\r\n        }else if(event=='vital' && tab == 'filter' && analytics != 'analytics'){\r\n            return eventQuery= ` WHERE (event_type='${event}' AND delete1='false' AND user_id='${user_id}' AND (event_datetime BETWEEN DATE('${startDate}') AND DATE('${endDate}'))) ORDER BY event_datetime DESC`\r\n        }else if(event=='vital' && tab == 'filter' && analytics == 'analytics' && event_nameArray!=null){\r\n            return eventQuery= ` WHERE (event_name IN ('${event_nameArray}') AND event_type='${event}' AND delete1='false' AND user_id='${user_id}' AND (event_datetime BETWEEN DATE('${startDate}') AND DATE('${endDate}'))) ORDER BY event_datetime DESC`\r\n        }else if(event=='vital' && tab == 'filter' && analytics == 'analytics' && event_nameArray==null){\r\n            return eventQuery= ` WHERE (event_type='${event}' AND delete1='false' AND user_id='${user_id}' AND (event_datetime BETWEEN DATE('${startDate}') AND DATE('${endDate}'))) ORDER BY event_datetime DESC`\r\n        }else if(event=='vital' && tab == 'pagefilter'){\r\n            return eventQuery= ` WHERE (event_type='${event}' AND delete1='false' AND user_id='${user_id}' AND (event_datetime BETWEEN DATE('${startDate}') AND DATE('${endDate}'))) ORDER BY event_datetime DESC LIMIT 10 OFFSET ${offset}`\r\n        }else if(event=='expense' && analytics == 'expense'){\r\n            return eventQuery= ` WHERE (event_type='${event}' AND delete1='false' AND user_id='${user_id}' AND (event_datetime BETWEEN DATE('${startDate}') AND DATE('${endDate}'))) ORDER BY event_datetime DESC`\r\n        }else if(event=='expense' && analytics == 'view_summary'){\r\n            return eventQuery= ` WHERE (event_type='${event}' AND delete1='false' AND user_id='${user_id}' AND (event_datetime BETWEEN DATE('${startDate}') AND DATE('${endDate}'))) ORDER BY event_datetime DESC`\r\n        }else if(event=='expense' && analytics == 'view_analytics' && event_nameArray!=null){\r\n            return eventQuery= ` WHERE (event_name IN ('${event_nameArray}') AND event_type='${event}' AND delete1='false' AND user_id='${user_id}' AND (event_datetime BETWEEN DATE('${startDate}') AND DATE('${endDate}'))) ORDER BY event_datetime DESC`\r\n        }else if(event=='expense' && analytics == 'view_analytics' && event_nameArray==null){\r\n            return eventQuery= ` WHERE (event_type='${event}' AND delete1='false' AND user_id='${user_id}' AND (event_datetime BETWEEN DATE('${startDate}') AND DATE('${endDate}'))) ORDER BY event_datetime DESC`\r\n        }else{\r\n            return eventQuery= ` WHERE (event_type='${event}' AND delete1='false' AND user_id='${user_id}') ORDER BY event_datetime DESC LIMIT 10 OFFSET ${offset}`\r\n        }\r\n        \r\n    }\r\n\r\n    async checkEventTypeSearch(event,search,type,offset) {\r\n        let eventSearchQuery:any;\r\n        //let nowDate = new Date().toJSON()\r\n        let user_id = await this.databaseService.getuserID();\r\n        if(event=='appointment' && type=='New'){\r\n            \r\n            return eventSearchQuery= ` WHERE ((event_name LIKE '%${search}%') OR (description LIKE '%${search}%') OR (event_category LIKE '%${search}%')) AND (event_type='${event}' AND DATETIME(event_datetime)>=DATETIME('now') AND delete1='false' AND user_id='${user_id}') ORDER BY event_datetime ASC LIMIT 10 OFFSET ${offset}`\r\n            \r\n        }else if(event=='appointment' && type=='history'){\r\n            \r\n            return eventSearchQuery= ` WHERE ((event_name LIKE '%${search}%') OR (description LIKE '%${search}%') OR (event_category LIKE '%${search}%')) AND (event_type='${event}' AND DATETIME(event_datetime)<DATETIME('now') AND delete1='false' AND user_id='${user_id}') ORDER BY event_datetime ASC LIMIT 10 OFFSET ${offset}`\r\n        }else if(event=='health_diary' || event=='doc_visit'){\r\n            return eventSearchQuery= ` WHERE ((event_name LIKE '%${search}%') OR (description LIKE '%${search}%') OR (event_category LIKE '%${search}%')) AND (event_type='${event}' AND delete1='false' AND user_id='${user_id}') ORDER BY created_at DESC LIMIT 10 OFFSET ${offset}`\r\n        }else{\r\n            return eventSearchQuery= ` WHERE ((event_name LIKE '%${search}%') OR (description LIKE '%${search}%') OR (event_category LIKE '%${search}%')) AND (event_type='${event}' AND delete1='false' AND user_id='${user_id}') ORDER BY event_datetime DESC LIMIT 10 OFFSET ${offset}`\r\n        }\r\n        \r\n    }\r\n\r\n    getEnumMasters(name): Promise<any> {\r\n        let sqlEnumQuery = SQL_SELECT_ALL_ENUMS+` WHERE category_name='${name}'`;\r\n        \r\n        return this.databaseService.getDatabase().then(database => {\r\n            return database.executeSql(sqlEnumQuery, []).then((data) => {\r\n                \r\n                let Enums = [];\r\n               \r\n                for (let i = 0; i < data.rows.length; i++) {\r\n                    Enums.push(data.rows.item(i).name);\r\n                };\r\n                \r\n                return { count: data.rows.length, enum_masters: Enums };\r\n            })\r\n        })\r\n    }\r\n\r\n    async diaryRecordFilter(data): Promise<any> {\r\n        let user_id = await this.databaseService.getuserID();\r\n      let sqlSearchEventQuery = SQL_SELECT_ALL_EVENTS+` WHERE (created_at BETWEEN DATE('${data[\"from_date\"]}') AND DATE('${data[\"end_date\"]}','+1 DAY')) AND (event_type='${data[\"event_type\"]}' AND delete1='false' AND user_id='${user_id}') ORDER BY created_at DESC LIMIT 10 OFFSET 0`;\r\n        \r\n        return this.databaseService.getDatabase().then(database => {\r\n            return database.executeSql(sqlSearchEventQuery, []).then((data) => {\r\n                let events: events[] = [];\r\n                let eventAssetsJson:any = null;\r\n\r\n                for (let i = 0; i < data.rows.length; i++) {\r\n                    let event_json:any = null;\r\n                    if (data.rows.item(i).event_options != null) {\r\n                        event_json = JSON.parse(data.rows.item(i).event_options);\r\n                    }\r\n                    if (data.rows.item(i).event_assets != null) {\r\n                        eventAssetsJson = JSON.parse(data.rows.item(i).event_assets);\r\n                    }\r\n\r\n                    events.push({\r\n                        id: data.rows.item(i).id,\r\n                        event_id: data.rows.item(i).event_id,\r\n                        event_name: data.rows.item(i).event_name,\r\n                        description: data.rows.item(i).description,\r\n                        value: data.rows.item(i).value,\r\n                        event_datetime: data.rows.item(i).event_datetime,\r\n                        event_type: data.rows.item(i).event_type,\r\n                        event_category: data.rows.item(i).event_category,\r\n                        event_assets: eventAssetsJson,\r\n                        event_options: event_json,\r\n                        user_id: data.rows.item(i).user_id,\r\n                        delete1: data.rows.item(i).delete1,\r\n                        created_at: data.rows.item(i).created_at,\r\n                        updated_at: data.rows.item(i).updated_at\r\n                    });  \r\n                };\r\n                return { count: data.rows.length, event_list: events };\r\n            })\r\n        })     \r\n    }\r\n\r\n    async getAboutData(): Promise<any> {\r\n        let user_id = await this.databaseService.getuserID(); \r\n        let getQRcode = await this.setQRcode();\r\n        let sqlHealthQuery = SQL_SELECT_ALL_HEALTH_DETAILS+` WHERE name='policy'`;\r\n        let sqlUserQuery = SQL_SELECT_ALL_USERS+` WHERE (id='${user_id}' AND role_id=1)`; //(id='${user_id}' AND role_id=1)\r\n        return this.databaseService.getDatabase().then(async (database) => {\r\n            \r\n            let healthData=[];\r\n            let userData=[];\r\n\r\n            await database.executeSql(sqlHealthQuery, []).then((data1) => {\r\n              for (let i = 0; i < data1.rows.length; i++) {\r\n                let event_json:any = null;\r\n                if (data1.rows.item(i).attribute_name_value != '') {\r\n                    event_json = JSON.parse(data1.rows.item(i).attribute_name_value);\r\n                }  \r\n                healthData.push({ \r\n                    id: data1.rows.item(i).id, \r\n                    health_id: data1.rows.item(i).health_id, \r\n                    name: data1.rows.item(i).name, \r\n                    attribute_name_value: event_json, \r\n                    user_id: data1.rows.item(i).user_id, \r\n                    created_at: data1.rows.item(i).created_at, \r\n                    updated_at: data1.rows.item(i).updated_at \r\n                })  \r\n              }\r\n            }).catch(res=>{\r\n                console.log(res)\r\n            })\r\n           \r\n            await database.executeSql(sqlUserQuery, []).then((data2) => {\r\n              console.log(data2.rows)\r\n              for (let i = 0; i < data2.rows.length; i++) {\r\n                  console.log(data2.rows.item(i))\r\n                let attribute_json:any = null;                    \r\n                if(data2.rows.item(i).user_picture!=null){\r\n                  attribute_json = JSON.parse(data2.rows.item(i).user_picture);    \r\n                }  \r\n                  \r\n                userData.push({ \r\n                    id: data2.rows.item(i).id,\r\n                    name: data2.rows.item(i).name,\r\n                    email: data2.rows.item(i).email,\r\n                    password: data2.rows.item(i).password,\r\n                    mobile_no: data2.rows.item(i).mobile_no,\r\n                    address: data2.rows.item(i).address,\r\n                    country: data2.rows.item(i).country,\r\n                    blood_group: data2.rows.item(i).blood_group,\r\n                    age: data2.rows.item(i).age,\r\n                    user_uid: data2.rows.item(i).user_uid,\r\n                    forgot_password_code: data2.rows.item(i).forgot_password_code,\r\n                    user_picture: attribute_json,\r\n                    active_status: data2.rows.item(i).active_status,\r\n                    role_id: data2.rows.item(i).role_id,\r\n                    created_at: data2.rows.item(i).created_at,\r\n                    updated_at: data2.rows.item(i).updated_at,\r\n                    delete1: data2.rows.item(i).delete1\r\n                })  \r\n              }\r\n            }).catch(res=>{\r\n                console.log(res)\r\n            })\r\n\r\n            return { policies: healthData, user_info: userData[0], qrcode_image: getQRcode };\r\n\r\n        })\r\n    }\r\n\r\n    async getHealthDeatails(): Promise<any> {\r\n       //let user_id = await this.databaseService.getuserID(); \r\n       let sqlHealthQuery = SQL_SELECT_ALL_HEALTH_DETAILS+` WHERE name='health'`;\r\n       return this.databaseService.getDatabase().then((database) => {\r\n         return database.executeSql(sqlHealthQuery, []).then((data) => {\r\n            let healthData=[];\r\n            for (let i = 0; i < data.rows.length; i++) {\r\n                let event_json:any = null;\r\n                if (data.rows.item(i).attribute_name_value != '') {\r\n                    event_json = JSON.parse(data.rows.item(i).attribute_name_value);\r\n                }  \r\n                healthData.push({ \r\n                    id: data.rows.item(i).id, \r\n                    health_id: data.rows.item(i).health_id, \r\n                    name: data.rows.item(i).name, \r\n                    attribute_name_value: event_json, \r\n                    user_id: data.rows.item(i).user_id, \r\n                    created_at: data.rows.item(i).created_at, \r\n                    updated_at: data.rows.item(i).updated_at \r\n                })  \r\n            }\r\n\r\n            return { health_detail: healthData };\r\n         }).catch(res=>{\r\n            console.log(res)\r\n        })  \r\n       })\r\n    }\r\n\r\n    getEmergencyDeatails(): Promise<any> {\r\n       let sqlEmergeQuery = SQL_SELECT_ALL_EMERGENCY_DATA;\r\n       let sqlUsersQuery = SQL_SELECT_ALL_USERS+` WHERE (role_id=1 AND delete1='false')`;\r\n       console.log(sqlUsersQuery)\r\n       return this.databaseService.getDatabase().then(async (database) => {\r\n        let emergencyContacts = []; \r\n        let careGiverData=[];\r\n        await database.executeSql(sqlEmergeQuery, []).then((data) => {\r\n            for (let i = 0; i < data.rows.length; i++) {\r\n                emergencyContacts.push({\r\n                id: data.rows.item(i).id,\r\n                emergency_id: data.rows.item(i).emergency_id,\r\n                contact_name: data.rows.item(i).contact_name,\r\n                emergency_no: data.rows.item(i).emergency_no,\r\n                user_type: data.rows.item(i).user_type,\r\n                user_id: data.rows.item(i).user_id,\r\n                created_at: data.rows.item(i).created_at,\r\n                updated_at: data.rows.item(i).updated_at,\r\n                delete1: data.rows.item(i).delete1\r\n                });\r\n            } \r\n         })\r\n         await database.executeSql(sqlUsersQuery, []).then((data1) => {\r\n            for (let i = 0; i < data1.rows.length; i++) {\r\n              if(data1.rows.item(i).email!=null){ \r\n                let attribute_json:any = null;\r\n                let user_option_json:any = null;                    \r\n                if(data1.rows.item(i).user_picture!=null){\r\n                  attribute_json = JSON.parse(data1.rows.item(i).user_picture);  \r\n                }\r\n                if(data1.rows.item(i).user_option!=null){\r\n                    user_option_json = JSON.parse(data1.rows.item(i).user_option);  \r\n                  }\r\n                careGiverData.push({\r\n                    id: data1.rows.item(i).id,\r\n                    name: data1.rows.item(i).name,\r\n                    email: data1.rows.item(i).email,\r\n                    password: data1.rows.item(i).password,\r\n                    mobile_no: data1.rows.item(i).mobile_no,\r\n                    address: data1.rows.item(i).address,\r\n                    country: data1.rows.item(i).country,\r\n                    blood_group: data1.rows.item(i).blood_group,\r\n                    age: data1.rows.item(i).age,\r\n                    user_uid: data1.rows.item(i).user_uid,\r\n                    forgot_password_code: data1.rows.item(i).forgot_password_code,\r\n                    user_picture: attribute_json,\r\n                    user_option : user_option_json,\r\n                    active_status: data1.rows.item(i).active_status,\r\n                    role_id: data1.rows.item(i).role_id,\r\n                    created_at: data1.rows.item(i).created_at,\r\n                    updated_at: data1.rows.item(i).updated_at,\r\n                    delete1: data1.rows.item(i).delete1\r\n                });\r\n              } \r\n            } \r\n         })\r\n         \r\n         return { caregiver_count: careGiverData.length ,caregivers: careGiverData,emergency_contact_count: emergencyContacts.length,emergency_detail: emergencyContacts };  \r\n       }).catch(res=>{\r\n        console.log(res)\r\n       })\r\n    }\r\n\r\n    async getAllUserPreviewData(){\r\n       let healthDetailData:any;\r\n       let policyDetail:any; \r\n       let emergency_data = await this.getEmergencyDeatails();\r\n       let aboutData = await this.getAboutData();\r\n       let healthData = await this.getHealthDeatails();\r\n       \r\n       if(healthData['health_detail'].length>0){\r\n          healthDetailData = healthData['health_detail'][0];  \r\n       }else{\r\n          healthDetailData=null\r\n       }\r\n       if(aboutData['policies'].length>0){\r\n          policyDetail = aboutData['policies'][0]\r\n       }else{\r\n          policyDetail = null; \r\n       }  \r\n       return { caregiver_contact: emergency_data['caregivers'], contacts: emergency_data['emergency_detail'], health_detail: healthDetailData, policy_details: policyDetail,user: aboutData['user_info']}\r\n\r\n    }\r\n\r\n    async getPatients(){\r\n        let user_id = await this.databaseService.getuserID();\r\n        let sqlUserQuery = SQL_SELECT_ALL_USERS+` WHERE (id='${user_id}' AND role_id=1)`;\r\n        return this.databaseService.getDatabase().then(async (database) => {\r\n          let userData=[];   \r\n          await database.executeSql(sqlUserQuery, []).then((data2) => {\r\n            for (let i = 0; i < data2.rows.length; i++) {\r\n              \r\n                let attribute_json:any = null;      \r\n                let user_option_json:any = null;              \r\n                if(data2.rows.item(i).user_picture!=null){\r\n                  attribute_json = JSON.parse(data2.rows.item(i).user_picture); \r\n                } \r\n                if(data2.rows.item(i).user_option!=null){\r\n                    user_option_json = JSON.parse(data2.rows.item(i).user_option);  \r\n                } \r\n              userData.push({ \r\n                  id: data2.rows.item(i).id,\r\n                  name: data2.rows.item(i).name,\r\n                  email: data2.rows.item(i).email,\r\n                  password: data2.rows.item(i).password,\r\n                  mobile_no: data2.rows.item(i).mobile_no,\r\n                  address: data2.rows.item(i).address,\r\n                  country: data2.rows.item(i).country,\r\n                  blood_group: data2.rows.item(i).blood_group,\r\n                  age: data2.rows.item(i).age,\r\n                  user_uid: data2.rows.item(i).user_uid,\r\n                  forgot_password_code: data2.rows.item(i).forgot_password_code,\r\n                  user_picture: attribute_json,\r\n                  user_option : user_option_json,\r\n                  active_status: data2.rows.item(i).active_status,\r\n                  role_id: data2.rows.item(i).role_id,\r\n                  created_at: data2.rows.item(i).created_at,\r\n                  updated_at: data2.rows.item(i).updated_at,\r\n                  delete1: data2.rows.item(i).delete1\r\n              })  \r\n            }\r\n          }).catch(res=>{\r\n            console.log(res)\r\n          })\r\n          return { patients: userData };\r\n        }).catch(res=>{\r\n            console.log(res)\r\n        })  \r\n    }\r\n\r\n    async getAllPatients(){\r\n        let user_id = await this.databaseService.getuserID();\r\n        let sqlUsersQuery = SQL_SELECT_ALL_USERS+` WHERE (role_id=1 AND delete1='false')`;\r\n        //let sqlUserQuery = SQL_SELECT_ALL_USERS+` WHERE id=${user_id} AND role_id=1`;\r\n        return this.databaseService.getDatabase().then(async (database) => {\r\n          let userData=[];   \r\n          await database.executeSql(sqlUsersQuery, []).then((data2) => {\r\n            for (let i = 0; i < data2.rows.length; i++) {\r\n             if(data2.rows.item(i).email!=null){                \r\n             \r\n                let attribute_json:any = null;                    \r\n                let user_option_json:any = null;              \r\n                if(data2.rows.item(i).user_picture!=null){\r\n                  attribute_json = JSON.parse(data2.rows.item(i).user_picture); \r\n                } \r\n                if(data2.rows.item(i).user_option!=null){\r\n                    user_option_json = JSON.parse(data2.rows.item(i).user_option);  \r\n                }\r\n              userData.push({ \r\n                  id: data2.rows.item(i).id,\r\n                  name: data2.rows.item(i).name,\r\n                  email: data2.rows.item(i).email,\r\n                  password: data2.rows.item(i).password,\r\n                  mobile_no: data2.rows.item(i).mobile_no,\r\n                  address: data2.rows.item(i).address,\r\n                  country: data2.rows.item(i).country,\r\n                  blood_group: data2.rows.item(i).blood_group,\r\n                  age: data2.rows.item(i).age,\r\n                  user_uid: data2.rows.item(i).user_uid,\r\n                  forgot_password_code: data2.rows.item(i).forgot_password_code,\r\n                  user_picture: attribute_json,\r\n                  user_option: user_option_json,\r\n                  active_status: data2.rows.item(i).active_status,\r\n                  role_id: data2.rows.item(i).role_id,\r\n                  created_at: data2.rows.item(i).created_at,\r\n                  updated_at: data2.rows.item(i).updated_at,\r\n                  delete1: data2.rows.item(i).delete1\r\n              })\r\n             }   \r\n            }\r\n          })\r\n          return { patients: userData };\r\n        })   \r\n    }\r\n\r\n    async getPicture_Show(){\r\n       \r\n        let emergency_data = await this.getEmergencyDeatails();\r\n        let aboutData = await this.getAboutData();\r\n        let getAllPatients = await this.getPatients();\r\n\r\n        return { caregiver: emergency_data['caregivers'],patient: getAllPatients['patients'],profile_pic: null,user_info: aboutData['user_info'] };\r\n \r\n    }\r\n\r\n    async getCaregiverData() {\r\n        let user_data = await this.getProfileID();\r\n        let sqlUsersQuery = SQL_SELECT_ALL_USERS+` WHERE (role_id=2 AND delete1='false')`;\r\n        return this.databaseService.getDatabase().then(async (database) => {\r\n            let userData=[];   \r\n            await database.executeSql(sqlUsersQuery, []).then((data2) => {\r\n                for (let i = 0; i < data2.rows.length; i++) {\r\n                    if(data2.rows.item(i).email!=null){                \r\n                        \r\n                        let attribute_json:any = null;                    \r\n                        let user_option_json:any = null;              \r\n                        if(data2.rows.item(i).user_picture!=null){\r\n                        attribute_json = JSON.parse(data2.rows.item(i).user_picture); \r\n                        } \r\n                        if(data2.rows.item(i).user_option!=null){\r\n                            user_option_json = JSON.parse(data2.rows.item(i).user_option);  \r\n                        }\r\n                        userData.push({ \r\n                            id: data2.rows.item(i).id,\r\n                            name: data2.rows.item(i).name,\r\n                            email: data2.rows.item(i).email,\r\n                            password: data2.rows.item(i).password,\r\n                            mobile_no: data2.rows.item(i).mobile_no,\r\n                            address: data2.rows.item(i).address,\r\n                            country: data2.rows.item(i).country,\r\n                            blood_group: data2.rows.item(i).blood_group,\r\n                            age: data2.rows.item(i).age,\r\n                            user_uid: data2.rows.item(i).user_uid,\r\n                            forgot_password_code: data2.rows.item(i).forgot_password_code,\r\n                            user_picture: attribute_json,\r\n                            user_option : user_option_json,\r\n                            active_status: data2.rows.item(i).active_status,\r\n                            role_id: data2.rows.item(i).role_id,\r\n                            created_at: data2.rows.item(i).created_at,\r\n                            updated_at: data2.rows.item(i).updated_at,\r\n                            delete1: data2.rows.item(i).delete1\r\n                        })\r\n                    }   \r\n                }\r\n            })\r\n            return { user_info: userData[0] };\r\n        })\r\n    }\r\n\r\n\r\n    async getCurrentUserandPatientsList(){\r\n        let current_user = await this.getCaregiverData();\r\n        let patients_list = await this.getAllPatients();\r\n\r\n        return { user_info: current_user['user_info'] , patient: patients_list['patients'] }\r\n    }\r\n\r\n    async getRecentAppointments(event){\r\n        let user_id = await this.databaseService.getuserID(); \r\n        let eventQuery= ` WHERE (event_type='${event}' AND DATETIME(event_datetime)>=DATETIME('now') AND delete1='false' AND user_id='${user_id}') ORDER BY event_datetime ASC LIMIT 4 OFFSET 0`      \r\n        let sqlSearchEventQuery = SQL_SELECT_ALL_EVENTS+eventQuery;\r\n        \r\n        return this.databaseService.getDatabase().then(database => {\r\n            return database.executeSql(sqlSearchEventQuery, []).then((data) => {\r\n                let events: events[] = [];\r\n                \r\n                for (let i = 0; i < data.rows.length; i++) {\r\n                    let event_json:any = null;\r\n                    let eventAssetsJson:any = null;\r\n                    if (data.rows.item(i).event_options != null) {\r\n                        event_json = JSON.parse(data.rows.item(i).event_options);\r\n                    }\r\n                    if (data.rows.item(i).event_assets != null) {\r\n                        eventAssetsJson = JSON.parse(data.rows.item(i).event_assets);\r\n                    }\r\n                    events.push({\r\n                        id: data.rows.item(i).id,\r\n                        event_id: data.rows.item(i).event_id,\r\n                        event_name: data.rows.item(i).event_name,\r\n                        description: data.rows.item(i).description,\r\n                        value: data.rows.item(i).value,\r\n                        event_datetime: data.rows.item(i).event_datetime,\r\n                        event_type: data.rows.item(i).event_type,\r\n                        event_category: data.rows.item(i).event_category,\r\n                        event_assets: eventAssetsJson,\r\n                        event_options: event_json,\r\n                        user_id: data.rows.item(i).user_id,\r\n                        delete1: data.rows.item(i).delete1,\r\n                        created_at: data.rows.item(i).created_at,\r\n                        updated_at: data.rows.item(i).updated_at\r\n                    });  \r\n                };\r\n                return { appointment_list:events };\r\n            })\r\n        })\r\n    }\r\n\r\n    setQRcode(){\r\n        let setQRcode = null;\r\n        if(localStorage.getItem(\"qrcode\")!=undefined){\r\n            setQRcode = localStorage.getItem(\"qrcode\");\r\n        }\r\n        return setQRcode;\r\n    }\r\n\r\n    getProfileID(){\r\n        let profile_id:any=null;\r\n        if(localStorage.getItem(\"profile_id\")!=undefined){\r\n            profile_id=localStorage.getItem(\"profile_id\");\r\n            return profile_id;\r\n        }\r\n        \r\n        return profile_id\r\n    }\r\n}\r\n"],"sourceRoot":""}