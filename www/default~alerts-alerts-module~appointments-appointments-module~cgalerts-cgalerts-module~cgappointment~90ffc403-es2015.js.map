{"version":3,"sources":["./src/app/sqlite-database/database_provider.ts"],"names":[],"mappings":"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","file":"default~alerts-alerts-module~appointments-appointments-module~cgalerts-cgalerts-module~cgappointment~90ffc403-es2015.js","sourcesContent":["import { HttpClient } from '@angular/common/http';\r\nimport { Injectable } from '@angular/core';\r\nimport { SQL_SELECT_ALL_CREDENTIALS, Setting, SQL_SELECT_ALL_EVENTS, events, SQL_SELECT_ALL_ENUMS, enum_masters, SQL_SELECT_ALL_HEALTH_DETAILS, SQL_SELECT_ALL_USERS,SQL_SELECT_ALL_EMERGENCY_DATA  } from './database.interface'\r\nimport { of,from ,zip } from 'rxjs';\r\n\r\nimport { concatMap, groupBy, map, mergeMap, reduce, toArray } from 'rxjs/operators';\r\nimport { formatDate } from '@angular/common';\r\nimport { DatabaseProvider } from './database';\r\n/*\r\n  Generated class for the SettingProvider provider.\r\n\r\n  See https://angular.io/guide/dependency-injection for more info on providers\r\n  and Angular DI.\r\n*/\r\n@Injectable()\r\nexport class DataBaseSummaryProvider {\r\n\r\n  constructor(public http: HttpClient,private databaseService: DatabaseProvider) {\r\n    console.log('Hello SettingProvider Provider');\r\n  }\r\n\r\n    getAll(): Promise<Setting[]> {\r\n        return this.databaseService.getDatabase().then(database => {\r\n            return database.executeSql(SQL_SELECT_ALL_CREDENTIALS, []).then((data) => {\r\n                let settings: Setting[] = [];\r\n                for (let i = 0; i < data.rows.length; i++) {\r\n                    settings.push({\r\n                        id: data.rows.item(i).id,\r\n                        email: data.rows.item(i).email,\r\n                        password: data.rows.item(i).password\r\n                    });\r\n                };\r\n                return settings;\r\n            });\r\n        });\r\n    }\r\n\r\n    async getAllEvents(event_type,tab,offset): Promise<any> {\r\n        let checkEvent = await this.checkEventType(event_type,tab,offset);\r\n        console.log(checkEvent);\r\n        let sqlEventQuery = SQL_SELECT_ALL_EVENTS+checkEvent;\r\n        console.log(sqlEventQuery)\r\n        \r\n        return this.databaseService.getDatabase().then(database => {\r\n            return database.executeSql(sqlEventQuery, []).then((data) => {\r\n                let events: events[] = [];\r\n                \r\n                for (let i = 0; i < data.rows.length; i++) {\r\n                    let event_json:any = null;\r\n                    let eventAssetsJson:any = null;\r\n                    if (data.rows.item(i).event_options != null) {\r\n                        event_json = JSON.parse(data.rows.item(i).event_options);\r\n                    }\r\n                    if (data.rows.item(i).event_assets != null) {\r\n                        eventAssetsJson = JSON.parse(data.rows.item(i).event_assets);\r\n                    }\r\n                    events.push({\r\n                        id: data.rows.item(i).id,\r\n                        event_id:data.rows.item(i).event_id,\r\n                        event_name: data.rows.item(i).event_name,\r\n                        description: data.rows.item(i).description,\r\n                        value: data.rows.item(i).value,\r\n                        event_datetime: data.rows.item(i).event_datetime,\r\n                        event_type: data.rows.item(i).event_type,\r\n                        event_category: data.rows.item(i).event_category,\r\n                        event_assets: eventAssetsJson,\r\n                        event_options: event_json,\r\n                        user_id:data.rows.item(i).user_id,\r\n                        delete1:data.rows.item(i).delete1,\r\n                        created_at: data.rows.item(i).created_at,\r\n                        updated_at: data.rows.item(i).updated_at\r\n                    });  \r\n                };\r\n                console.log(data.rows.length,events)\r\n                return { count:data.rows.length,event_list:events};\r\n            })\r\n        })\r\n    }\r\n\r\n    async getAllEventsSearchList(event_type,search,additionType,offset): Promise<any> {\r\n        let checkEvent = await this.checkEventTypeSearch(event_type,search,additionType,offset);\r\n        let sqlSearchEventQuery = SQL_SELECT_ALL_EVENTS+checkEvent;\r\n        \r\n        return this.databaseService.getDatabase().then(database => {\r\n            return database.executeSql(sqlSearchEventQuery, []).then((data) => {\r\n                let events: events[] = [];\r\n                \r\n                for (let i = 0; i < data.rows.length; i++) {\r\n                    let event_json:any = null;\r\n                    let eventAssetsJson:any = null;\r\n                    if (data.rows.item(i).event_options != null) {\r\n                        event_json = JSON.parse(data.rows.item(i).event_options);\r\n                    }\r\n                    if (data.rows.item(i).event_assets != null) {\r\n                        eventAssetsJson = JSON.parse(data.rows.item(i).event_assets);\r\n                    }\r\n                    events.push({\r\n                        id: data.rows.item(i).id,\r\n                        event_id: data.rows.item(i).event_id,\r\n                        event_name: data.rows.item(i).event_name,\r\n                        description: data.rows.item(i).description,\r\n                        value: data.rows.item(i).value,\r\n                        event_datetime: data.rows.item(i).event_datetime,\r\n                        event_type: data.rows.item(i).event_type,\r\n                        event_category: data.rows.item(i).event_category,\r\n                        event_assets: eventAssetsJson,\r\n                        event_options: event_json,\r\n                        user_id: data.rows.item(i).user_id,\r\n                        delete1: data.rows.item(i).delete1,\r\n                        created_at: data.rows.item(i).created_at,\r\n                        updated_at: data.rows.item(i).updated_at\r\n                    });  \r\n                };\r\n                return { count:data.rows.length,event_list:events };\r\n            })\r\n        })\r\n    }\r\n\r\n    async filterVitalHistory(event_type,event_name,from_date,end_date,vital_page_offset): Promise<any> {\r\n        let checkEvent = await this.checkEventType(event_type,'pagefilter',vital_page_offset,from_date,end_date,null,event_name);\r\n        let sqlSearchEventQuery = SQL_SELECT_ALL_EVENTS+checkEvent;\r\n      \r\n        return this.databaseService.getDatabase().then(database => {\r\n            return database.executeSql(sqlSearchEventQuery, []).then((data) => {\r\n                let events: events[] = [];\r\n                \r\n                for (let i = 0; i < data.rows.length; i++) {\r\n                    let event_json:any = null;\r\n                    let eventAssetsJson:any = null;\r\n                    if (data.rows.item(i).event_options != null) {\r\n                        event_json = JSON.parse(data.rows.item(i).event_options);\r\n                    }\r\n                    if (data.rows.item(i).event_assets != null) {\r\n                        eventAssetsJson = JSON.parse(data.rows.item(i).event_assets);\r\n                    }\r\n                    events.push({\r\n                        id: data.rows.item(i).id,\r\n                        event_id:data.rows.item(i).event_id,\r\n                        event_name: data.rows.item(i).event_name,\r\n                        description: data.rows.item(i).description,\r\n                        value: data.rows.item(i).value,\r\n                        event_datetime: data.rows.item(i).event_datetime,\r\n                        event_type: data.rows.item(i).event_type,\r\n                        event_category: data.rows.item(i).event_category,\r\n                        event_assets: eventAssetsJson,\r\n                        event_options: event_json,\r\n                        user_id:data.rows.item(i).user_id,\r\n                        delete1:data.rows.item(i).delete1,\r\n                        created_at: data.rows.item(i).created_at,\r\n                        updated_at: data.rows.item(i).updated_at\r\n                    });  \r\n                };\r\n                return { count:data.rows.length,events:events};\r\n            })\r\n        })        \r\n\r\n    }\r\n\r\n    async getVitalEvents(id,from_date,end_date,event_type,analytics?,event_name?): Promise<any> {\r\n        let checkEvent = await this.checkEventType(event_type,'filter',0,from_date,end_date,analytics,event_name);\r\n        let sqlSearchEventQuery = SQL_SELECT_ALL_EVENTS+checkEvent;\r\n        \r\n        return this.databaseService.getDatabase().then(database => {\r\n            return database.executeSql(sqlSearchEventQuery, []).then((data) => {\r\n                \r\n                let events: events[] = [];\r\n                \r\n                for (let i = 0; i < data.rows.length; i++) {\r\n                    let event_json:any = null;\r\n                    let eventAssetsJson:any = null;\r\n                    if (data.rows.item(i).event_options != null) {\r\n                        event_json = JSON.parse(data.rows.item(i).event_options);\r\n                    }\r\n                    if (data.rows.item(i).event_assets != null) {\r\n                        eventAssetsJson = JSON.parse(data.rows.item(i).event_assets);\r\n                    }\r\n                    events.push({\r\n                        id: data.rows.item(i).id,\r\n                        event_id:data.rows.item(i).event_id,\r\n                        event_name: data.rows.item(i).event_name,\r\n                        description: data.rows.item(i).description,\r\n                        value: data.rows.item(i).value,\r\n                        event_datetime: data.rows.item(i).event_datetime,\r\n                        event_type: data.rows.item(i).event_type,\r\n                        event_category: data.rows.item(i).event_category,\r\n                        event_assets: eventAssetsJson,\r\n                        event_options: event_json,\r\n                        user_id:data.rows.item(i).user_id,\r\n                        delete1:data.rows.item(i).delete1,\r\n                        created_at: data.rows.item(i).created_at,\r\n                        updated_at: data.rows.item(i).updated_at\r\n                    });  \r\n                };\r\n                return { count:data.rows.length,event_list:events};\r\n            })\r\n        })        \r\n\r\n    }\r\n\r\n\r\n\r\n    filterVitalEventNameList(id,from_date,end,type){\r\n        return this.getVitalEvents(id,from_date,end,type).then(response => {\r\n          let data = response['event_list'];\r\n           \r\n            let value = [];\r\n            const example = from(data).pipe(\r\n            groupBy(person =>  person['event_name']),\r\n            mergeMap(group => from(group).pipe(toArray()))\r\n            ).subscribe(val => {\r\n               \r\n                if(val){\r\n                 value.push(val[0]['event_name']); \r\n                }  \r\n             \r\n            })\r\n\r\n            return { events : value }\r\n\r\n        })\r\n    }\r\n\r\n\r\n    async expenseCalculation(){\r\n        let user_id = await this.databaseService.getuserID();\r\n        let sqlUserQuery = SQL_SELECT_ALL_USERS+` WHERE id='${user_id}'`\r\n        return this.databaseService.getDatabase().then(database => {\r\n            return database.executeSql(sqlUserQuery, []).then(async (data) => {\r\n                \r\n                let getUserData = data.rows.item(0);\r\n                let joinMonth =  getUserData.created_at || null;\r\n                \r\n                let currentDate = new Date();\r\n                \r\n                var y = currentDate.getFullYear();\r\n                var m = currentDate.getMonth();\r\n                let lastDate = currentDate;\r\n                lastDate.setDate(lastDate.getDate() + 1);\r\n                let getfirst_month = new Date(y, 0, 31);\r\n                let setfirst_month = getfirst_month.toJSON();\r\n                let currentMonth = new Date(y, m, 1);\r\n                let first_day = new Date(y, 0, 1);\r\n                var fy = first_day.getFullYear();\r\n                var fm = first_day.getMonth();\r\n                let no_of_months = ( y * 12 + m) - ( fy * 12 + fm)\r\n\r\n                let CurrentMonthStart = currentMonth.toJSON();\r\n                \r\n                let CurrentMonthEnd = lastDate.toJSON();\r\n                 \r\n                let sqlCurrentMonthExpQuery =  `SELECT SUM(value) FROM events WHERE (event_type='expense' AND delete1='false' AND user_id='${user_id}' AND (event_datetime BETWEEN DATE('${CurrentMonthStart}') AND DATE('${CurrentMonthEnd}')))`\r\n                \r\n                let getResponseOfMonthExp = await this.expenseCalculateValue(sqlCurrentMonthExpQuery);\r\n                \r\n                let CurrentMonthExpense = getResponseOfMonthExp.rows.item(0)['SUM(value)']\r\n                \r\n                let firstDayOfYear = first_day.toJSON();\r\n               \r\n                let lastDayofYear = lastDate.toJSON();\r\n                \r\n                let sqlCurrentYearExpQuery = `SELECT SUM(value) FROM events WHERE (event_type='expense' AND delete1='false' AND user_id='${user_id}' AND (event_datetime BETWEEN DATE('${firstDayOfYear}') AND DATE('${lastDayofYear}')))`\r\n               \r\n                let getResponseOfYearExp = await this.expenseCalculateValue(sqlCurrentYearExpQuery);\r\n                let CurrentYearExpense = getResponseOfYearExp.rows.item(0)['SUM(value)']\r\n                if(joinMonth!=null && joinMonth <= setfirst_month){\r\n                    \r\n                    let projectionM = (CurrentYearExpense / no_of_months)\r\n                    let MonthlyProjection = projectionM.toFixed(2);\r\n                    let projectionY = (projectionM * 12)\r\n                    let yearlyProjection = projectionY.toFixed(2);\r\n\r\n                    return { CurrentMonth : CurrentMonthExpense, Yearly: CurrentYearExpense, status: true , MonthProjection: MonthlyProjection,YearlyProjection: yearlyProjection};\r\n                }else{\r\n                 \r\n                    return { CurrentMonth : CurrentMonthExpense, Yearly: CurrentYearExpense, status: false };   \r\n                }\r\n\r\n                \r\n                \r\n            })\r\n            \r\n        })\r\n        \r\n    }\r\n\r\n    async expenseCalculateValue(query){\r\n        return this.databaseService.getDatabase().then(database => {\r\n            return database.executeSql(query, []).then((data) => {\r\n              return data;\r\n            }).catch(e=>{console.log(e)})\r\n        })        \r\n    }\r\n\r\n    async expense_cals_chart(){\r\n      let currentDate = new Date();\r\n      var y = currentDate.getFullYear();\r\n      let first_day = new Date(y, 0, 1);\r\n      let last_day = currentDate;\r\n      var m = currentDate.getMonth();\r\n      let currentMonth = new Date(y, m, 1);\r\n      let getAllYearData = await this.getAllExpenses(first_day,last_day);\r\n      let yearData = getAllYearData['event_list'];\r\n      \r\n      let getAllCurrentData = await this.getAllExpenses(currentMonth,last_day);\r\n      let MonthData = getAllCurrentData['event_list'];\r\n      \r\n     let array = [];\r\n     let dateobject = {};\r\n     await from(MonthData).pipe(\r\n     groupBy(person => formatDate(person['event_datetime'], 'yyyy-MM-dd', 'en-US')),\r\n     mergeMap(group => zip(of(group.key),group.pipe(toArray()))),\r\n     map(val => {\r\n    \r\n        let total = val[1].reduce( ( accumulator, sample ) => { // reduce the stream\r\n            return accumulator + Number(sample['value']);\r\n        }, 0);\r\n        return {event_datetime:val[0],data:val[1],value :total};\r\n     }),\r\n     toArray()\r\n     ).subscribe(res=>{\r\n        \r\n            array = res;\r\n            \r\n            \r\n            for(var i in array){\r\n            \r\n                let data = array[i]['data']\r\n                let allArray = [];\r\n                const arrayreduce = Array.from(new Set(array[i]['data'].map(s=>s.event_name))).map((name,index)=>{\r\n                    \r\n                    let total = array[i]['data'].reduce((accumulator,data1) => {\r\n                    \r\n                    if(data1.event_name == name && accumulator !=undefined && accumulator !=null){\r\n                        return accumulator + Number(data1['value'])\r\n                    }else{\r\n                        return accumulator;\r\n                    }\r\n                    },0)\r\n                    \r\n                \r\n                    allArray.push([name,total])\r\n                    \r\n                    \r\n                })\r\n                \r\n                if(dateobject[array[i]['event_datetime']]==undefined){\r\n                    dateobject[array[i]['event_datetime']]=[]; \r\n                    dateobject[array[i]['event_datetime']].push({data: allArray, event_datetime:array[i]['event_datetime'], value:array[i]['value'] });\r\n                }else{\r\n                    dateobject[array[i]['event_datetime']].push({data: allArray, event_datetime:array[i]['event_datetime'], value:array[i]['value'] });\r\n                }\r\n            }\r\n\r\n    });\r\n   \r\n    let array1 = [];\r\n    let yearObject = {};\r\n\r\n    await from(yearData).pipe(\r\n        groupBy(person => formatDate(person['event_datetime'], 'MMMM', 'en-US')),\r\n        mergeMap(group => zip(of(group.key),group.pipe(toArray()))),\r\n        map(val => {\r\n       \r\n           let total = val[1].reduce( ( accumulator, sample ) => { // reduce the stream\r\n               return accumulator + Number(sample['value']);\r\n           }, 0);\r\n           return {event_datetime:val[0],data:val[1],value :total};\r\n        }),\r\n        toArray()\r\n        ).subscribe(res=>{\r\n           \r\n            array1 = res;\r\n               \r\n               \r\n               for(var i in array1){\r\n               \r\n                   let data = array1[i]['data']\r\n                   let allArray = [];\r\n                   const arrayreduce = Array.from(new Set(array1[i]['data'].map(s=>s.event_name))).map((name,index)=>{\r\n                       \r\n                       let total = array1[i]['data'].reduce((accumulator,data1) => {\r\n                      \r\n                       if(data1.event_name == name && accumulator !=undefined && accumulator !=null){\r\n                           return accumulator + Number(data1['value'])\r\n                       }else{\r\n                           return accumulator;\r\n                       }\r\n                       },0)\r\n                       \r\n                   \r\n                       allArray.push([name,total])\r\n                       \r\n                       \r\n                   })\r\n                   if(yearObject[array1[i]['event_datetime']]==undefined){\r\n                     yearObject[array1[i]['event_datetime']]=[];\r\n                     yearObject[array1[i]['event_datetime']].push({data: allArray, event_datetime:array1[i]['event_datetime'],value:array1[i]['value']})\r\n                   }else{\r\n                     yearObject[array1[i]['event_datetime']].push({data: allArray, event_datetime:array1[i]['event_datetime'],value:array1[i]['value']})\r\n                   }\r\n                   \r\n               \r\n               }\r\n\r\n   \r\n       });\r\n    //   let value = [];\r\n    //   const example = from(data).pipe(\r\n    //   groupBy(person =>  person['event_name']),\r\n    //   mergeMap(group => from(group).pipe(toArray()))\r\n    //   ).subscribe(val => {\r\n    //     console.log(val)\r\n    //   })\r\n        let totalValue = await yearData.reduce((accum,hash)=>{\r\n            return accum + Number(hash['value'])\r\n        },0)\r\n      let total_year = [{ year:y,value: totalValue}]\r\n      return { Currentmonth : dateobject, Totalyear: total_year, Year: yearObject };\r\n    }\r\n\r\n    async getAllExpenses(first_day,last_day){\r\n        let user_id = await this.databaseService.getuserID();\r\n        let startDay = formatDate(first_day, 'yyyy-MM-dd', 'en-US');\r\n        let lastDay = last_day.toString();\r\n        let endDay = new Date(lastDay);\r\n        endDay.setDate(endDay.getDate() + 1);\r\n        let EndDayOfCurrent = endDay.toJSON()\r\n        let sqlSearchEventQuery = SQL_SELECT_ALL_EVENTS+` WHERE (event_type='expense' AND delete1='false' AND user_id='${user_id}' AND (event_datetime BETWEEN DATE('${startDay}') AND DATE('${EndDayOfCurrent}'))) ORDER BY event_datetime DESC`\r\n       \r\n        return this.databaseService.getDatabase().then(database => {\r\n            return database.executeSql(sqlSearchEventQuery, []).then((data) => {\r\n               \r\n                let events: events[] = [];\r\n                \r\n                for (let i = 0; i < data.rows.length; i++) {\r\n                   \r\n                    let event_json:any = null;\r\n                    let eventAssetsJson:any = null;\r\n                    if (data.rows.item(i).event_options != null) {\r\n                        event_json = JSON.parse(data.rows.item(i).event_options);\r\n                    }\r\n                    if (data.rows.item(i).event_assets != null) {\r\n                        eventAssetsJson = JSON.parse(data.rows.item(i).event_assets);\r\n                    }\r\n                    events.push({\r\n                        id: data.rows.item(i).id,\r\n                        event_id:data.rows.item(i).event_id,\r\n                        event_name: data.rows.item(i).event_name,\r\n                        description: data.rows.item(i).description,\r\n                        value: data.rows.item(i).value,\r\n                        event_datetime: data.rows.item(i).event_datetime,\r\n                        event_type: data.rows.item(i).event_type,\r\n                        event_category: data.rows.item(i).event_category,\r\n                        event_assets: eventAssetsJson,\r\n                        event_options: event_json,\r\n                        user_id:data.rows.item(i).user_id,\r\n                        delete1:data.rows.item(i).delete1,\r\n                        created_at: data.rows.item(i).created_at,\r\n                        updated_at: data.rows.item(i).updated_at\r\n                    });  \r\n                };\r\n                return { count:data.rows.length,event_list:events};\r\n            })\r\n        })        \r\n    }\r\n\r\n\r\n\r\n    async currentUserData(data){\r\n        let events: events[] = [];\r\n        for (let i = 0; i < data.rows.length; i++) { \r\n                let event_json:any = null;\r\n                let eventAssetsJson:any = null;\r\n                if (data.rows.item(i).event_options != null) {\r\n                    event_json = JSON.parse(data.rows.item(i).event_options);\r\n                }\r\n                if (data.rows.item(i).event_assets != null) {\r\n                    eventAssetsJson = JSON.parse(data.rows.item(i).event_assets);\r\n                }\r\n            events.push({\r\n                id: data.rows.item(i).id,\r\n                event_id:data.rows.item(i).event_id,\r\n                event_name: data.rows.item(i).event_name,\r\n                description: data.rows.item(i).description,\r\n                value: data.rows.item(i).value,\r\n                event_datetime: data.rows.item(i).event_datetime,\r\n                event_type: data.rows.item(i).event_type,\r\n                event_category: data.rows.item(i).event_category,\r\n                event_assets: eventAssetsJson,\r\n                event_options: event_json,\r\n                user_id:data.rows.item(i).user_id,\r\n                delete1:data.rows.item(i).delete1,\r\n                created_at: data.rows.item(i).created_at,\r\n                updated_at: data.rows.item(i).updated_at\r\n            });\r\n        }\r\n     \r\n     return events;\r\n    }\r\n\r\n    expenseDatefilter(id,from_date,end,type){\r\n        return this.getVitalEvents(id,from_date,end,type,'expense').then(response => {\r\n            let data = response['event_list'];\r\n\r\n            let value = [];\r\n            const example = from(data).pipe(\r\n            groupBy(person =>  person['event_name']),\r\n            mergeMap(group => from(group).pipe(toArray()))\r\n            ).subscribe(val => {\r\n                \r\n                if(val){\r\n                 value.push(val[0]['event_name']); \r\n                }  \r\n             \r\n            })\r\n\r\n            return { events : value }\r\n        })    \r\n    }\r\n\r\n    ExpenseViewSummary(from_date,end,type,event_name?,analytics?){\r\n        return this.getVitalEvents('1',from_date,end,type,analytics,event_name).then(response => {\r\n            let data = response['event_list'];\r\n            let fromDate =  formatDate(from_date, 'yyyy-MM-dd', 'en-US');\r\n            let end_date =  formatDate(end, 'yyyy-MM-dd', 'en-US');\r\n            let value = [];\r\n            let vital = {}\r\n            const example = from(data).pipe(\r\n            groupBy(person =>  person['event_name']),\r\n            mergeMap(group => from(group).pipe(toArray()))\r\n            ).subscribe(val => {\r\n                \r\n                vital[`${val[0]['event_name']}`]=val;\r\n            })\r\n\r\n            return { from_date : fromDate ,end_date: end_date, expense:  vital} \r\n        })\r\n    }\r\n\r\n    vitalFilterAnalytics(id,paramsOfdata){\r\n        let params = paramsOfdata;\r\n        return this.getVitalEvents(id,params['from_date'],params['end_date'],'vital','analytics',params['event_name']).then(response => {\r\n            \r\n            let data = response['event_list'];\r\n            \r\n            // let value = {}\r\n            // const example = from(data).pipe(\r\n            //     groupBy(person =>  person['event_name']),  //,person =>  person.event_category\r\n            //     mergeMap(group => group.pipe(toArray())),\r\n            //     mergeMap((array) => {// Take each from above array and group each array by manDate\r\n            //       return from(array).pipe(groupBy(\r\n            //         val => formatDate(val['event_datetime'], 'yyyy-MM-dd', 'en-US'),\r\n            //         ),\r\n            //         mergeMap(group => {\r\n            //           return group.pipe(toArray()); // return the group values as Arrays\r\n            //         })\r\n            //       );\r\n            //     }),\r\n            //     mergeMap((array) => {// Take each from above array and group each array by manDate\r\n            //       return from(array).pipe(groupBy(\r\n            //         val => val['event_category'],\r\n            //         ),\r\n            //         mergeMap(group => {\r\n            //           return group.pipe(toArray()); // return the group values as Arrays\r\n            //         })\r\n            //       );\r\n            //     }),map((val) => {  //For each array returned , calculate the sum and map it to the Object you wanted\r\n                 \r\n            //       return { event_name: val[0]['event_name'], date: val[0]['event_datetime'], event_category: val[0]['event_category'], data:val }\r\n            //     })\r\n            //   ).subscribe(val => {\r\n               \r\n            //    console.log(val,\"test\")\r\n            //      let event_name = `${val['event_name']}`;\r\n            //      let date = formatDate(val.date, 'yyyy-MM-dd', 'en-US');\r\n            //      let event_category = val.event_category;\r\n                \r\n            //      value[`${event_name}`][`${date}`][`${event_category}`] = val['data'];\r\n            //   })\r\n            let vitalList = {};\r\n            for(let i in data){\r\n                \r\n                  let event_datetime = formatDate(data[i]['event_datetime'], 'yyyy-MM-dd', 'en-US');\r\n                  let event_category = data[i]['event_category'];\r\n                  let event_name = data[i]['event_name'];\r\n                  if(vitalList[`${event_name}`]==undefined){\r\n                    vitalList[`${event_name}`] = {};\r\n                    vitalList[`${event_name}`][`${event_datetime}`]={};\r\n                    vitalList[`${event_name}`][`${event_datetime}`][`${event_category}`] = []\r\n                    vitalList[`${event_name}`][`${event_datetime}`][`${event_category}`].push(data[i]);\r\n                  }else if(vitalList[`${event_name}`][`${event_datetime}`]==undefined){\r\n                    vitalList[`${event_name}`][`${event_datetime}`]={};\r\n                    vitalList[`${event_name}`][`${event_datetime}`][`${event_category}`] = []\r\n                    vitalList[`${event_name}`][`${event_datetime}`][`${event_category}`].push(data[i]); \r\n                  }else if(vitalList[`${event_name}`][`${event_datetime}`][`${event_category}`]==undefined){\r\n                    vitalList[`${event_name}`][`${event_datetime}`][`${event_category}`]=[]\r\n                   \r\n                    vitalList[`${event_name}`][`${event_datetime}`][`${event_category}`].push(data[i]);   \r\n                  }else{\r\n                    vitalList[`${event_name}`][`${event_datetime}`][`${event_category}`].push(data[i]); \r\n                  }\r\n                       \r\n          \r\n            }\r\n\r\n            return vitalList;\r\n  \r\n          })\r\n    }\r\n\r\n    async checkEventType(event,tab,offset,from_date?,end_date?,analytics?,event_name?) {\r\n        \r\n        let startDate = null;\r\n        let endDate = null;\r\n        if(from_date!=undefined && end_date!=undefined){\r\n            let string1 = from_date.toString();\r\n            \r\n            let string2 = end_date.toString();\r\n            \r\n            let Date1 = new Date(string1);\r\n            \r\n            let Date2 = new Date(string2);\r\n            Date2.setDate(Date2.getDate() + 1);\r\n            \r\n            startDate = formatDate(Date1, 'yyyy-MM-dd', 'en-US');\r\n            \r\n            endDate = formatDate(Date2, 'yyyy-MM-dd', 'en-US');\r\n            \r\n        }\r\n    \r\n        let eventQuery:any;\r\n        let event_nameArray = null;\r\n        if(event_name!=null && event_name.length>0 && typeof(event_name)==\"object\"){\r\n            event_nameArray = event_name.map(x=>`\"${x}\"`).toString();\r\n        }\r\n        \r\n        let user_id = await this.databaseService.getuserID();\r\n        //let nowDate = new Date().toJSON()\r\n        if(event=='appointment' && tab=='New'){\r\n            return eventQuery= ` WHERE (event_type='${event}' AND DATETIME(event_datetime)>=DATETIME('now') AND delete1='false' AND user_id='${user_id}') ORDER BY event_datetime ASC LIMIT 10 OFFSET ${offset}`      \r\n        }else if(event=='appointment' && tab=='history'){\r\n            return eventQuery= ` WHERE (event_type='${event}' AND DATETIME(event_datetime)<DATETIME('now') AND delete1='false' AND user_id='${user_id}') ORDER BY event_datetime ASC LIMIT 10 OFFSET ${offset}`\r\n        }else if(event=='health_diary' || event=='doc_visit'){\r\n            return eventQuery= ` WHERE (event_type='${event}' AND delete1='false' AND user_id='${user_id}') ORDER BY created_at DESC LIMIT 10 OFFSET ${offset}`\r\n        }else if(event=='vital' && tab == 'New'){\r\n            return eventQuery= ` WHERE (event_type='${event}' AND delete1='false' AND user_id='${user_id}') ORDER BY event_datetime DESC`\r\n        }else if(event=='vital' && tab == 'filter' && analytics != 'analytics'){\r\n            return eventQuery= ` WHERE (event_type='${event}' AND delete1='false' AND user_id='${user_id}' AND (event_datetime BETWEEN DATE('${startDate}') AND DATE('${endDate}'))) ORDER BY event_datetime DESC`\r\n        }else if(event=='vital' && tab == 'filter' && analytics == 'analytics' && event_nameArray!=null){\r\n            return eventQuery= ` WHERE (event_name IN (${event_nameArray}) AND event_type='${event}' AND delete1='false' AND user_id='${user_id}' AND (event_datetime BETWEEN DATE('${startDate}') AND DATE('${endDate}'))) ORDER BY event_datetime DESC`\r\n        }else if(event=='vital' && tab == 'filter' && analytics == 'analytics' && event_nameArray==null){\r\n            return eventQuery= ` WHERE (event_type='${event}' AND delete1='false' AND user_id='${user_id}' AND (event_datetime BETWEEN DATE('${startDate}') AND DATE('${endDate}'))) ORDER BY event_datetime DESC`\r\n        }else if(event=='vital' && tab == 'pagefilter'){\r\n            return eventQuery= ` WHERE (event_type='${event}' AND delete1='false' AND user_id='${user_id}' AND (event_datetime BETWEEN DATE('${startDate}') AND DATE('${endDate}'))) ORDER BY event_datetime DESC LIMIT 10 OFFSET ${offset}`\r\n        }else if(event=='expense' && analytics == 'expense'){\r\n            return eventQuery= ` WHERE (event_type='${event}' AND delete1='false' AND user_id='${user_id}' AND (event_datetime BETWEEN DATE('${startDate}') AND DATE('${endDate}'))) ORDER BY event_datetime DESC`\r\n        }else if(event=='expense' && analytics == 'view_summary'){\r\n            return eventQuery= ` WHERE (event_type='${event}' AND delete1='false' AND user_id='${user_id}' AND (event_datetime BETWEEN DATE('${startDate}') AND DATE('${endDate}'))) ORDER BY event_datetime DESC`\r\n        }else if(event=='expense' && analytics == 'view_analytics' && event_nameArray!=null){\r\n            return eventQuery= ` WHERE (event_name IN (${event_nameArray}) AND event_type='${event}' AND delete1='false' AND user_id='${user_id}' AND (event_datetime BETWEEN DATE('${startDate}') AND DATE('${endDate}'))) ORDER BY event_datetime DESC`\r\n        }else if(event=='expense' && analytics == 'view_analytics' && event_nameArray==null){\r\n            return eventQuery= ` WHERE (event_type='${event}' AND delete1='false' AND user_id='${user_id}' AND (event_datetime BETWEEN DATE('${startDate}') AND DATE('${endDate}'))) ORDER BY event_datetime DESC`\r\n        }else{\r\n            return eventQuery= ` WHERE (event_type='${event}' AND delete1='false' AND user_id='${user_id}') ORDER BY event_datetime DESC LIMIT 10 OFFSET ${offset}`\r\n        }\r\n        \r\n    }\r\n\r\n    async checkEventTypeSearch(event,search,type,offset) {\r\n        let eventSearchQuery:any;\r\n        //let nowDate = new Date().toJSON()\r\n        let user_id = await this.databaseService.getuserID();\r\n        if(event=='appointment' && type=='New'){\r\n            \r\n            return eventSearchQuery= ` WHERE ((event_name LIKE '%${search}%') OR (description LIKE '%${search}%') OR (event_category LIKE '%${search}%')) AND (event_type='${event}' AND DATETIME(event_datetime)>=DATETIME('now') AND delete1='false' AND user_id='${user_id}') ORDER BY event_datetime ASC LIMIT 10 OFFSET ${offset}`\r\n            \r\n        }else if(event=='appointment' && type=='history'){\r\n            \r\n            return eventSearchQuery= ` WHERE ((event_name LIKE '%${search}%') OR (description LIKE '%${search}%') OR (event_category LIKE '%${search}%')) AND (event_type='${event}' AND DATETIME(event_datetime)<DATETIME('now') AND delete1='false' AND user_id='${user_id}') ORDER BY event_datetime ASC LIMIT 10 OFFSET ${offset}`\r\n        }else if(event=='health_diary' || event=='doc_visit'){\r\n            return eventSearchQuery= ` WHERE ((event_name LIKE '%${search}%') OR (description LIKE '%${search}%') OR (event_category LIKE '%${search}%')) AND (event_type='${event}' AND delete1='false' AND user_id='${user_id}') ORDER BY created_at DESC LIMIT 10 OFFSET ${offset}`\r\n        }else{\r\n            return eventSearchQuery= ` WHERE ((event_name LIKE '%${search}%') OR (description LIKE '%${search}%') OR (event_category LIKE '%${search}%')) AND (event_type='${event}' AND delete1='false' AND user_id='${user_id}') ORDER BY event_datetime DESC LIMIT 10 OFFSET ${offset}`\r\n        }\r\n        \r\n    }\r\n\r\n    getEnumMasters(name): Promise<any> {\r\n        let sqlEnumQuery = SQL_SELECT_ALL_ENUMS+` WHERE category_name='${name}'`;\r\n        \r\n        return this.databaseService.getDatabase().then(database => {\r\n            return database.executeSql(sqlEnumQuery, []).then((data) => {\r\n                \r\n                let Enums = [];\r\n               \r\n                for (let i = 0; i < data.rows.length; i++) {\r\n                    Enums.push(data.rows.item(i).name);\r\n                };\r\n                \r\n                return { count: data.rows.length, enum_masters: Enums };\r\n            })\r\n        })\r\n    }\r\n\r\n    async diaryRecordFilter(data): Promise<any> {\r\n        let user_id = await this.databaseService.getuserID();\r\n        let sqlSearchEventQuery = SQL_SELECT_ALL_EVENTS+` WHERE (created_at BETWEEN DATE('${data[\"from_date\"]}') AND DATE('${data[\"end_date\"]}','+1 DAY')) AND (event_type='${data[\"event_type\"]}' AND delete1='false' AND user_id='${user_id}') ORDER BY created_at DESC LIMIT 10 OFFSET 0`;\r\n        \r\n        return this.databaseService.getDatabase().then(database => {\r\n            return database.executeSql(sqlSearchEventQuery, []).then((data) => {\r\n                let events: events[] = [];\r\n                let eventAssetsJson:any = null;\r\n\r\n                for (let i = 0; i < data.rows.length; i++) {\r\n                    let event_json:any = null;\r\n                    if (data.rows.item(i).event_options != null) {\r\n                        event_json = JSON.parse(data.rows.item(i).event_options);\r\n                    }\r\n                    if (data.rows.item(i).event_assets != null) {\r\n                        eventAssetsJson = JSON.parse(data.rows.item(i).event_assets);\r\n                    }\r\n\r\n                    events.push({\r\n                        id: data.rows.item(i).id,\r\n                        event_id: data.rows.item(i).event_id,\r\n                        event_name: data.rows.item(i).event_name,\r\n                        description: data.rows.item(i).description,\r\n                        value: data.rows.item(i).value,\r\n                        event_datetime: data.rows.item(i).event_datetime,\r\n                        event_type: data.rows.item(i).event_type,\r\n                        event_category: data.rows.item(i).event_category,\r\n                        event_assets: eventAssetsJson,\r\n                        event_options: event_json,\r\n                        user_id: data.rows.item(i).user_id,\r\n                        delete1: data.rows.item(i).delete1,\r\n                        created_at: data.rows.item(i).created_at,\r\n                        updated_at: data.rows.item(i).updated_at\r\n                    });  \r\n                };\r\n                return { count: data.rows.length, event_list: events };\r\n            })\r\n        })     \r\n    }\r\n\r\n    async getAboutData() {\r\n        let user_id = await this.databaseService.getuserID(); \r\n        let getQRcode = await this.setQRcode();\r\n        let sqlHealthQuery = SQL_SELECT_ALL_HEALTH_DETAILS+` WHERE name='policy'`;\r\n        let sqlUserQuery = SQL_SELECT_ALL_USERS+` WHERE (id='${user_id}' AND role_id=1)`; //(id='${user_id}' AND role_id=1)\r\n        return this.databaseService.getDatabase().then(async (database) => {\r\n            \r\n            let healthData=[];\r\n            let userData=[];\r\n            \r\n            await database.executeSql(sqlHealthQuery, []).then((data1) => {\r\n              for (let i = 0; i < data1.rows.length; i++) {\r\n                console.log(data1.rows.item(i))\r\n                debugger;\r\n                let event_json:any = null;\r\n                if (data1.rows.item(i).attribute_name_value != '' && data1.rows.item(i).attribute_name_value != null) {\r\n                   \r\n                    event_json = JSON.parse(data1.rows.item(i).attribute_name_value);\r\n                }\r\n                  \r\n                healthData.push({ \r\n                    id: data1.rows.item(i).id, \r\n                    health_id: data1.rows.item(i).health_id, \r\n                    name: data1.rows.item(i).name, \r\n                    attribute_name_value: event_json, \r\n                    user_id: data1.rows.item(i).user_id, \r\n                    created_at: data1.rows.item(i).created_at, \r\n                    updated_at: data1.rows.item(i).updated_at \r\n                })  \r\n              }\r\n              return healthData;\r\n            })\r\n\r\n            // let await1 = new Promise(resolve => {\r\n            //     database.executeSql(sqlHealthQuery, []).then((data1) => {\r\n            //         for (let i = 0; i < data1.rows.length; i++) {\r\n            //             console.log(data1.rows.item(i))\r\n                \r\n            //             let event_json:any = null;\r\n            //             if (data1.rows.item(i).attribute_name_value != '' && data1.rows.item(i).attribute_name_value != null) {\r\n                            \r\n            //                 event_json = JSON.parse(data1.rows.item(i).attribute_name_value);\r\n            //             }\r\n                            \r\n            //             healthData.push({ \r\n            //                 id: data1.rows.item(i).id, \r\n            //                 health_id: data1.rows.item(i).health_id, \r\n            //                 name: data1.rows.item(i).name, \r\n            //                 attribute_name_value: event_json, \r\n            //                 user_id: data1.rows.item(i).user_id, \r\n            //                 created_at: data1.rows.item(i).created_at, \r\n            //                 updated_at: data1.rows.item(i).updated_at \r\n            //             });\r\n                        \r\n            //             if((data1.rows.length-1)==i){\r\n            //                 setTimeout(()=>{\r\n            //                     resolve('Hello from a Promise!');  \r\n            //                 },500)\r\n            //             }\r\n            //         }\r\n            //     })\r\n            // });\r\n           \r\n            let await2 = await database.executeSql(sqlUserQuery, []).then((data2) => {\r\n              \r\n              for (let i = 0; i < data2.rows.length; i++) {\r\n                let attribute_json:any = null;                    \r\n                if(data2.rows.item(i).user_picture!=null){\r\n                  attribute_json = JSON.parse(data2.rows.item(i).user_picture);    \r\n                }  \r\n                  \r\n                userData.push({ \r\n                    id: data2.rows.item(i).id,\r\n                    name: data2.rows.item(i).name,\r\n                    email: data2.rows.item(i).email,\r\n                    password: data2.rows.item(i).password,\r\n                    mobile_no: data2.rows.item(i).mobile_no,\r\n                    address: data2.rows.item(i).address,\r\n                    country: data2.rows.item(i).country,\r\n                    blood_group: data2.rows.item(i).blood_group,\r\n                    age: data2.rows.item(i).age,\r\n                    user_uid: data2.rows.item(i).user_uid,\r\n                    forgot_password_code: data2.rows.item(i).forgot_password_code,\r\n                    user_picture: attribute_json,\r\n                    active_status: data2.rows.item(i).active_status,\r\n                    role_id: data2.rows.item(i).role_id,\r\n                    created_at: data2.rows.item(i).created_at,\r\n                    updated_at: data2.rows.item(i).updated_at,\r\n                    delete1: data2.rows.item(i).delete1\r\n                })  \r\n              }\r\n              return userData;\r\n            })\r\n\r\n            return { policies: healthData, user_info: userData[0], qrcode_image: getQRcode };\r\n\r\n        })\r\n    }\r\n\r\n    async getHealthDeatails(): Promise<any> {\r\n       //let user_id = await this.databaseService.getuserID(); \r\n       let sqlHealthQuery = SQL_SELECT_ALL_HEALTH_DETAILS+` WHERE name='health'`;\r\n       return this.databaseService.getDatabase().then((database) => {\r\n         return database.executeSql(sqlHealthQuery, []).then((data) => {\r\n            let healthData=[];\r\n            for (let i = 0; i < data.rows.length; i++) {\r\n                let event_json:any = null;\r\n                if (data.rows.item(i).attribute_name_value != '') {\r\n                    event_json = JSON.parse(data.rows.item(i).attribute_name_value);\r\n                }  \r\n                healthData.push({ \r\n                    id: data.rows.item(i).id, \r\n                    health_id: data.rows.item(i).health_id, \r\n                    name: data.rows.item(i).name, \r\n                    attribute_name_value: event_json, \r\n                    user_id: data.rows.item(i).user_id, \r\n                    created_at: data.rows.item(i).created_at, \r\n                    updated_at: data.rows.item(i).updated_at \r\n                })  \r\n            }\r\n\r\n            return { health_detail: healthData };\r\n         }).catch(res=>{\r\n            console.log(res)\r\n        })  \r\n       })\r\n    }\r\n\r\n    getEmergencyDeatails(): Promise<any> {\r\n       let sqlEmergeQuery = SQL_SELECT_ALL_EMERGENCY_DATA+` WHERE delete1='false'`;\r\n       let sqlUsersQuery = SQL_SELECT_ALL_USERS+` WHERE (role_id=2 AND delete1='false')`;\r\n       \r\n       return this.databaseService.getDatabase().then(async (database) => {\r\n        let emergencyContacts = []; \r\n        let careGiverData=[];\r\n        await database.executeSql(sqlEmergeQuery, []).then((data) => {\r\n            for (let i = 0; i < data.rows.length; i++) {\r\n                emergencyContacts.push({\r\n                id: data.rows.item(i).id,\r\n                emergency_id: data.rows.item(i).emergency_id,\r\n                contact_name: data.rows.item(i).contact_name,\r\n                emergency_no: data.rows.item(i).emergency_no,\r\n                user_type: data.rows.item(i).user_type,\r\n                user_id: data.rows.item(i).user_id,\r\n                created_at: data.rows.item(i).created_at,\r\n                updated_at: data.rows.item(i).updated_at,\r\n                delete1: data.rows.item(i).delete1\r\n                });\r\n            } \r\n         })\r\n         await database.executeSql(sqlUsersQuery, []).then((data1) => {\r\n            for (let i = 0; i < data1.rows.length; i++) {\r\n              if(data1.rows.item(i).email!=null){ \r\n                let attribute_json:any = null;\r\n                let user_option_json:any = null;                    \r\n                if(data1.rows.item(i).user_picture!=null){\r\n                  attribute_json = JSON.parse(data1.rows.item(i).user_picture);  \r\n                }\r\n                if(data1.rows.item(i).user_option!=null){\r\n                    user_option_json = JSON.parse(data1.rows.item(i).user_option);  \r\n                  }\r\n                careGiverData.push({\r\n                    id: data1.rows.item(i).id,\r\n                    name: data1.rows.item(i).name,\r\n                    email: data1.rows.item(i).email,\r\n                    password: data1.rows.item(i).password,\r\n                    mobile_no: data1.rows.item(i).mobile_no,\r\n                    address: data1.rows.item(i).address,\r\n                    country: data1.rows.item(i).country,\r\n                    blood_group: data1.rows.item(i).blood_group,\r\n                    age: data1.rows.item(i).age,\r\n                    user_uid: data1.rows.item(i).user_uid,\r\n                    forgot_password_code: data1.rows.item(i).forgot_password_code,\r\n                    user_picture: attribute_json,\r\n                    user_option : user_option_json,\r\n                    active_status: data1.rows.item(i).active_status,\r\n                    role_id: data1.rows.item(i).role_id,\r\n                    created_at: data1.rows.item(i).created_at,\r\n                    updated_at: data1.rows.item(i).updated_at,\r\n                    delete1: data1.rows.item(i).delete1\r\n                });\r\n              } \r\n            } \r\n         })\r\n         \r\n         return { caregiver_count: careGiverData.length ,caregivers: careGiverData,emergency_contact_count: emergencyContacts.length,emergency_detail: emergencyContacts };  \r\n       }).catch(res=>{\r\n        console.log(res)\r\n       })\r\n    }\r\n\r\n    async getAllUserPreviewData(){\r\n       let healthDetailData:any;\r\n       let policyDetail:any; \r\n       let emergency_data = await this.getEmergencyDeatails();\r\n       let aboutData = await this.getAboutData();\r\n       let healthData = await this.getHealthDeatails();\r\n       \r\n       if(healthData['health_detail'].length>0){\r\n          healthDetailData = healthData['health_detail'][0];  \r\n       }else{\r\n          healthDetailData=null\r\n       }\r\n       if(aboutData['policies'].length>0){\r\n          policyDetail = aboutData['policies'][0]\r\n       }else{\r\n          policyDetail = null; \r\n       }  \r\n       return { caregiver_contact: emergency_data['caregivers'], contacts: emergency_data['emergency_detail'], health_detail: healthDetailData, policy_details: policyDetail,user: aboutData['user_info']}\r\n\r\n    }\r\n\r\n    async getPatients(){\r\n        let user_id = await this.databaseService.getuserID();\r\n        let sqlUserQuery = SQL_SELECT_ALL_USERS+` WHERE (id='${user_id}' AND role_id=1)`;\r\n        return this.databaseService.getDatabase().then(async (database) => {\r\n          let userData=[];   \r\n          await database.executeSql(sqlUserQuery, []).then((data2) => {\r\n            for (let i = 0; i < data2.rows.length; i++) {\r\n              \r\n                let attribute_json:any = null;      \r\n                let user_option_json:any = null;              \r\n                if(data2.rows.item(i).user_picture!=null){\r\n                  attribute_json = JSON.parse(data2.rows.item(i).user_picture); \r\n                } \r\n                if(data2.rows.item(i).user_option!=null){\r\n                    user_option_json = JSON.parse(data2.rows.item(i).user_option);  \r\n                } \r\n              userData.push({ \r\n                  id: data2.rows.item(i).id,\r\n                  name: data2.rows.item(i).name,\r\n                  email: data2.rows.item(i).email,\r\n                  password: data2.rows.item(i).password,\r\n                  mobile_no: data2.rows.item(i).mobile_no,\r\n                  address: data2.rows.item(i).address,\r\n                  country: data2.rows.item(i).country,\r\n                  blood_group: data2.rows.item(i).blood_group,\r\n                  age: data2.rows.item(i).age,\r\n                  user_uid: data2.rows.item(i).user_uid,\r\n                  forgot_password_code: data2.rows.item(i).forgot_password_code,\r\n                  user_picture: attribute_json,\r\n                  user_option : user_option_json,\r\n                  active_status: data2.rows.item(i).active_status,\r\n                  role_id: data2.rows.item(i).role_id,\r\n                  created_at: data2.rows.item(i).created_at,\r\n                  updated_at: data2.rows.item(i).updated_at,\r\n                  delete1: data2.rows.item(i).delete1\r\n              })  \r\n            }\r\n          }).catch(res=>{\r\n            console.log(res)\r\n          })\r\n          return { patients: userData };\r\n        }).catch(res=>{\r\n            console.log(res)\r\n        })  \r\n    }\r\n\r\n    async getAllPatients(){\r\n        let user_id = await this.databaseService.getuserID();\r\n        let sqlUsersQuery = SQL_SELECT_ALL_USERS+` WHERE (role_id=1 AND delete1='false')`;\r\n        //let sqlUserQuery = SQL_SELECT_ALL_USERS+` WHERE id=${user_id} AND role_id=1`;\r\n        return this.databaseService.getDatabase().then(async (database) => {\r\n          let userData=[];   \r\n          await database.executeSql(sqlUsersQuery, []).then((data2) => {\r\n            for (let i = 0; i < data2.rows.length; i++) {\r\n             if(data2.rows.item(i).email!=null){                \r\n             \r\n                let attribute_json:any = null;                    \r\n                let user_option_json:any = null;              \r\n                if(data2.rows.item(i).user_picture!=null){\r\n                  attribute_json = JSON.parse(data2.rows.item(i).user_picture); \r\n                } \r\n                if(data2.rows.item(i).user_option!=null){\r\n                    user_option_json = JSON.parse(data2.rows.item(i).user_option);  \r\n                }\r\n              userData.push({ \r\n                  id: data2.rows.item(i).id,\r\n                  name: data2.rows.item(i).name,\r\n                  email: data2.rows.item(i).email,\r\n                  password: data2.rows.item(i).password,\r\n                  mobile_no: data2.rows.item(i).mobile_no,\r\n                  address: data2.rows.item(i).address,\r\n                  country: data2.rows.item(i).country,\r\n                  blood_group: data2.rows.item(i).blood_group,\r\n                  age: data2.rows.item(i).age,\r\n                  user_uid: data2.rows.item(i).user_uid,\r\n                  forgot_password_code: data2.rows.item(i).forgot_password_code,\r\n                  user_picture: attribute_json,\r\n                  user_option: user_option_json,\r\n                  active_status: data2.rows.item(i).active_status,\r\n                  role_id: data2.rows.item(i).role_id,\r\n                  created_at: data2.rows.item(i).created_at,\r\n                  updated_at: data2.rows.item(i).updated_at,\r\n                  delete1: data2.rows.item(i).delete1\r\n              })\r\n             }   \r\n            }\r\n          })\r\n          return { patients: userData };\r\n        })   \r\n    }\r\n\r\n    async getPicture_Show(){\r\n       \r\n        let emergency_data = await this.getEmergencyDeatails();\r\n        let aboutData = await this.getAboutData();\r\n        let getAllPatients = await this.getPatients();\r\n\r\n        return { caregiver: emergency_data['caregivers'],patient: getAllPatients['patients'],profile_pic: null,user_info: aboutData['user_info'] };\r\n \r\n    }\r\n\r\n    async getCaregiverData() {\r\n        let user_data = await this.getProfileID();\r\n        let sqlUsersQuery = SQL_SELECT_ALL_USERS+` WHERE (role_id=2 AND delete1='false')`;\r\n        return this.databaseService.getDatabase().then(async (database) => {\r\n            let userData=[];   \r\n            await database.executeSql(sqlUsersQuery, []).then((data2) => {\r\n                for (let i = 0; i < data2.rows.length; i++) {\r\n                    if(data2.rows.item(i).email!=null){                \r\n                        \r\n                        let attribute_json:any = null;                    \r\n                        let user_option_json:any = null;              \r\n                        if(data2.rows.item(i).user_picture!=null){\r\n                        attribute_json = JSON.parse(data2.rows.item(i).user_picture); \r\n                        } \r\n                        if(data2.rows.item(i).user_option!=null){\r\n                            user_option_json = JSON.parse(data2.rows.item(i).user_option);  \r\n                        }\r\n                        userData.push({ \r\n                            id: data2.rows.item(i).id,\r\n                            name: data2.rows.item(i).name,\r\n                            email: data2.rows.item(i).email,\r\n                            password: data2.rows.item(i).password,\r\n                            mobile_no: data2.rows.item(i).mobile_no,\r\n                            address: data2.rows.item(i).address,\r\n                            country: data2.rows.item(i).country,\r\n                            blood_group: data2.rows.item(i).blood_group,\r\n                            age: data2.rows.item(i).age,\r\n                            user_uid: data2.rows.item(i).user_uid,\r\n                            forgot_password_code: data2.rows.item(i).forgot_password_code,\r\n                            user_picture: attribute_json,\r\n                            user_option : user_option_json,\r\n                            active_status: data2.rows.item(i).active_status,\r\n                            role_id: data2.rows.item(i).role_id,\r\n                            created_at: data2.rows.item(i).created_at,\r\n                            updated_at: data2.rows.item(i).updated_at,\r\n                            delete1: data2.rows.item(i).delete1\r\n                        })\r\n                    }   \r\n                }\r\n            })\r\n            return { user_info: userData[0] };\r\n        })\r\n    }\r\n\r\n\r\n    async getCurrentUserandPatientsList(){\r\n        let current_user = await this.getCaregiverData();\r\n        let patients_list = await this.getAllPatients();\r\n\r\n        return { user_info: current_user['user_info'] , patient: patients_list['patients'] }\r\n    }\r\n\r\n    async getRecentAppointments(event){\r\n        let user_id = await this.databaseService.getuserID(); \r\n        let eventQuery= ` WHERE (event_type='${event}' AND DATETIME(event_datetime)>=DATETIME('now') AND delete1='false' AND user_id='${user_id}') ORDER BY event_datetime ASC LIMIT 4 OFFSET 0`      \r\n        let sqlSearchEventQuery = SQL_SELECT_ALL_EVENTS+eventQuery;\r\n        \r\n        return this.databaseService.getDatabase().then(database => {\r\n            return database.executeSql(sqlSearchEventQuery, []).then((data) => {\r\n                let events: events[] = [];\r\n                \r\n                for (let i = 0; i < data.rows.length; i++) {\r\n                    let event_json:any = null;\r\n                    let eventAssetsJson:any = null;\r\n                    if (data.rows.item(i).event_options != null) {\r\n                        event_json = JSON.parse(data.rows.item(i).event_options);\r\n                    }\r\n                    if (data.rows.item(i).event_assets != null) {\r\n                        eventAssetsJson = JSON.parse(data.rows.item(i).event_assets);\r\n                    }\r\n                    events.push({\r\n                        id: data.rows.item(i).id,\r\n                        event_id: data.rows.item(i).event_id,\r\n                        event_name: data.rows.item(i).event_name,\r\n                        description: data.rows.item(i).description,\r\n                        value: data.rows.item(i).value,\r\n                        event_datetime: data.rows.item(i).event_datetime,\r\n                        event_type: data.rows.item(i).event_type,\r\n                        event_category: data.rows.item(i).event_category,\r\n                        event_assets: eventAssetsJson,\r\n                        event_options: event_json,\r\n                        user_id: data.rows.item(i).user_id,\r\n                        delete1: data.rows.item(i).delete1,\r\n                        created_at: data.rows.item(i).created_at,\r\n                        updated_at: data.rows.item(i).updated_at\r\n                    });  \r\n                };\r\n                return { appointment_list:events };\r\n            })\r\n        })\r\n    }\r\n\r\n    setQRcode(){\r\n        let setQRcode = null;\r\n        if(localStorage.getItem(\"qrcode\")!=undefined){\r\n            setQRcode = localStorage.getItem(\"qrcode\");\r\n        }\r\n        return setQRcode;\r\n    }\r\n\r\n    getProfileID(){\r\n        let profile_id:any=null;\r\n        if(localStorage.getItem(\"profile_id\")!=undefined){\r\n            profile_id=localStorage.getItem(\"profile_id\");\r\n            return profile_id;\r\n        }\r\n        \r\n        return profile_id\r\n    }\r\n}\r\n"],"sourceRoot":""}