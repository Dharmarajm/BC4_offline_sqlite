{"version":3,"sources":["./src/app/sqlite-database/database.ts"],"names":[],"mappings":"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","file":"default~about-about-module~alerts-alerts-module~appointments-appointments-module~cgalerts-cgalerts-m~bb4df914-es5.js","sourcesContent":["import { Injectable } from '@angular/core';\nimport { Platform } from '@ionic/angular';\n\nimport { SQL_TABLES } from './database.interface';\nimport { SQLite, SQLiteObject } from '@ionic-native/sqlite/ngx';\nimport { from, Observable, forkJoin  } from 'rxjs';\n//import { NetworkService } from '../network-connectivity/network-service';\nimport { syncProvider } from '../sync/sync'\nimport { async } from 'q';\n\n/*\n  Generated class for the DatabaseProvider provider.\n\n  See https://angular.io/guide/dependency-injection for more info on providers\n  and Angular DI.\n*/\nconst DATA_BASE_NAME = 'BCared4.db';\n\nenum user_type {\n    \"Emergency\" = 1,\n    \"Doctor\" = 2,\n    \"Care Giver\" = 3\n}\n\n@Injectable({providedIn:'root'})\nexport class DatabaseProvider {\n  \n  database: SQLiteObject;\n  ready: Promise<void>;\n  isNetworkOnline:boolean;\n  responseData1:any[];\n  responseData2:any[];\n  responseData3:any[];\n  responseData4:any[]; \n  \n    constructor(public sqlite: SQLite, private platform: Platform,public syncProvide:syncProvider) {\n        this.Oninit();   \n    }\n\n    Oninit(){\n        console.log('Oninit')\n        //console.log(user_type[3])\n        this.ready = this.platform.ready()\n            .then(() => this.initializeDatabase())\n            .then(() => this.bootstrapTables())\n    }\n\n    initializeDatabase() {\n        console.log('initialize')\n        return this.sqlite.create({\n            name: DATA_BASE_NAME,\n            location: 'default'\n        }).then((db: SQLiteObject) => {\n           let sqlTable1 = `CREATE TABLE IF NOT EXISTS emergency_details(id INTEGER,emergency_id INTEGER PRIMARY KEY AUTOINCREMENT,contact_name TEXT DEFAULT NULL,emergency_no TEXT DEFAULT NULL,user_type TEXT,user_id INTEGER,created_at DATETIME,updated_at DATETIME,delete1 BOOLEAN)`;\n           db.executeSql(sqlTable1, []);\n            // .then((res)=>{\n            //    console.log(res,'emergencysuccess')\n            // }).catch(err=>{console.log(err,'emergencyerror')});\n           let sqlTable2 = `CREATE TABLE IF NOT EXISTS enum_masters(id INTEGER,name TEXT,category_name TEXT,created_at DATETIME,updated_at DATETIME)`;\n           db.executeSql(sqlTable2, []);\n           \n           let sqlTable4 = `CREATE TABLE IF NOT EXISTS health_details(id INTEGER,health_id INTEGER PRIMARY KEY AUTOINCREMENT,name TEXT,attribute_name_value TEXT DEFAULT NULL,user_id INTEGER,created_at DATETIME,updated_at DATETIME)`;\n           db.executeSql(sqlTable4, []);\n           let sqlTable5 = `CREATE TABLE IF NOT EXISTS users(id INTEGER,name TEXT,email TEXT,password TEXT DEFAULT NULL,mobile_no TEXT DEFAULT NULL,address TEXT DEFAULT NULL,country TEXT DEFAULT NULL,blood_group TEXT DEFAULT NULL,age INTEGER DEFAULT NULL,user_uid TEXT,forgot_password_code TEXT DEFAULT NULL,user_picture TEXT DEFAULT NULL,user_option TEXT DEFAULT NULL,active_status TEXT,role_id INTEGER,created_at DATETIME,updated_at DATETIME,delete1 BOOLEAN)`;  //userRecord_id INTEGER PRIMARY KEY AUTOINCREMENT\n           db.executeSql(sqlTable5, []);\n           let sqlTable6 = `CREATE TABLE IF NOT EXISTS user_associations(id INTEGER,patient_id INTEGER,caregiver_id INTEGER,nick_name TEXT DEFAULT NULL,created_at DATETIME,updated_at DATETIME)`;\n           db.executeSql(sqlTable6, []);\n           let sqlTable3 = `CREATE TABLE IF NOT EXISTS events(id INTEGER,event_id INTEGER PRIMARY KEY AUTOINCREMENT,event_name TEXT,description TEXT,value TEXT DEFAULT NULL,event_datetime INTEGER,event_type TEXT,event_category TEXT,event_assets TEXT DEFAULT NULL,event_options TEXT DEFAULT NULL,user_id INTEGER,created_at DATETIME,updated_at DATETIME,delete1 BOOLEAN)`;\n           db.executeSql(sqlTable3, [])\n           .then(() =>{\n             let sqlTableIndex = `CREATE INDEX IF NOT EXISTS event_index on events(event_type, event_datetime, created_at)`;\n             db.executeSql(sqlTableIndex, []);  \n           });\n        })\n    }\n\n    async bootstrapTables(){\n        console.log('bootstrap')\n        return this.sqlite.create({\n            name: DATA_BASE_NAME,\n            location: 'default'\n        }).then((db: SQLiteObject) => {\n            return db.executeSql(`SELECT * FROM enum_masters`, []).then(async (data) => {\n            console.log('bootstrap1')\n            //   if(data.rows.length==0){\n            //    await this.getTotalEnumMasters(db);\n            //   }\n            //   let user_id = await this.getuserID();\n            //   if(user_id!=undefined){\n            //     await this.awaitAllUsersTableData(db);\n            //   }\n             await this.syncProvide.initiateSync();\n            }) \n        }) \n    }\n\n    getDatabase() {\n        return this.ready.then(() => {\n            return this.sqlite.create({\n                name: DATA_BASE_NAME,\n                location: 'default'\n            }).then((db: SQLiteObject) => {\n                return db;\n            })\n        });\n    }\n\n    async createAnEvent(data) {\n        let user_id = await this.getuserID();\n        return this.sqlite.create({\n            name: DATA_BASE_NAME,\n            location: 'default'\n        }).then((db: SQLiteObject) => {\n            let sql = `INSERT INTO events VALUES (NULL,NULL,?,?,?,?,?,?,?,?,?,?,?,?)`;\n            let createEventData = [data[\"event_name\"],data[\"description\"],data[\"value\"],data[\"event_datetime\"],data[\"event_type\"],data[\"event_category\"],JSON.stringify(data[\"event_assets\"]),JSON.stringify(data[\"event_options\"]),user_id,new Date().toJSON(),new Date().toJSON(),false]\n            return db.executeSql(sql,createEventData).then((row: any)=>{  \n                return { event_id:row.insertId }\n            }).catch(res=>{\n                return res;\n            });\n        })\n    }\n\n    async createAnVitalEvent(getData) {\n        //let user_id = await this.getuserID();\n        return this.sqlite.create({\n            name: DATA_BASE_NAME,\n            location: 'default'\n        }).then((db: SQLiteObject) => {\n            let event_type = getData['event_type'];\n            let event_name = getData['event_name'];\n            let event_datetime = getData['event_datetime'];\n            let event_category = getData['event_category']\n            let sqlSearchEventQuery = `SELECT * FROM events WHERE (event_type='${event_type}' AND event_name='${event_name}' AND event_category='${event_category}' AND DATE(event_datetime)=DATE('${event_datetime}') AND delete1='false')`;\n            return db.executeSql(sqlSearchEventQuery, []).then((data) => {\n               \n                for (let i = 0; i < data.rows.length; i++) {\n                    \n                }\n                if(data.rows.length>0){\n                    let passData = data.rows.item(0); \n                    getData['id'] = passData['id'];\n                    \n                    return this.updateAnEvent(passData['event_id'],getData);\n                }else{\n                    \n                    return this.createAnEvent(getData);\n                }\n            }).catch(res=>{\n                \n            })\n        })\n    }\n    \n    async updateAnEvent(id,data) {\n        let user_id = await this.getuserID();\n        return this.sqlite.create({\n            name: DATA_BASE_NAME,\n            location: 'default'\n        }).then((db: SQLiteObject) => {\n            let sql = `UPDATE events SET id = ?, event_name = ?, description = ?, value = ?, event_datetime = ?, event_type = ?, event_category = ?, event_assets = ?, event_options = ?, user_id = ?, created_at = ?, updated_at = ?, delete1 = ? WHERE event_id = ?`;\n            let updateEventData = [data[\"id\"],data[\"event_name\"],data[\"description\"],data[\"value\"],data[\"event_datetime\"],data[\"event_type\"],data[\"event_category\"],JSON.stringify(data[\"event_assets\"]),JSON.stringify(data[\"event_options\"]),user_id,data[\"created_at\"],new Date().toJSON(),false,id]\n            \n            return db.executeSql(sql,updateEventData).then((row: any)=>{\n                return { event_id:row.insertId }\n            }).catch(res=>{\n                return res;\n            })\n        })\n    }\n\n    async updateAnEventImage(id,data) {\n        return this.sqlite.create({\n            name: DATA_BASE_NAME,\n            location: 'default'\n        }).then((db: SQLiteObject) => {\n            let sql = `UPDATE events SET event_options = ? WHERE event_id = ?`;\n            let updateEventImageData = [JSON.stringify(data[\"event_options\"]),id]\n            \n            return db.executeSql(sql,updateEventImageData).then((row: any)=>{\n                return { event_id:row.insertId }\n            }).catch(res=>{\n                return res;\n            })\n        })\n    }\n\n    deleteAnEvent(event){\n       return this.sqlite.create({\n            name: DATA_BASE_NAME,\n            location: 'default'\n        }).then((db: SQLiteObject) => {\n          if(event[\"id\"]==null){\n            let sql = `DELETE FROM events WHERE event_id = ?`;\n            return db.executeSql(sql,[event[\"event_id\"]]).then((row: any)=>{\n              return { event_id:row.insertId }\n            }).catch(res=>{\n                return res;\n            });\n          }else{\n            let sql = `UPDATE events SET delete1 = ? WHERE event_id = ?`;\n            return db.executeSql(sql,[true,event[\"event_id\"]]).then((row: any)=>{\n              return { event_id:row.insertId }\n            }).catch(res=>{\n                return res;\n            }); \n          }   \n          \n        })\n    }\n\n    async updateUserAndPolicyData(data){\n     \n      let user_id = await this.getuserID();\n      let user_data = data['user'];\n      let policy_data = data['policy'];\n      policy_data[\"name\"]=\"policy\";\n      \n      return this.sqlite.create({\n        name: DATA_BASE_NAME,\n        location: 'default'\n      }).then(async(db: SQLiteObject) => {\n           \n         let sql = `UPDATE users SET age = ?, blood_group = ?, updated_at = ?  WHERE id = ? AND role_id = ?`;\n         let updateUserData = [user_data['age'],user_data['blood_group'],new Date().toJSON(),user_id,1];\n         await db.executeSql(sql,updateUserData);\n         await db.executeSql(`SELECT * FROM health_details WHERE name='${policy_data['name']}'`,[]).then((data)=>{\n           \n            if(data.rows.length>0){\n             let id = data.rows.item(0).health_id;\n             \n             return this.updateHealthData(policy_data,id);\n           }else{\n            \n             return this.updateHealthData(policy_data);\n           } \n         },error=>{\n             \n         })\n      },error=>{\n          \n      })     \n    }\n\n    async updateUserData(data){\n        //let user_id = await this.getuserID();\n        return this.sqlite.create({\n            name: DATA_BASE_NAME,\n            location: 'default'\n        }).then((db: SQLiteObject) => {\n            let sql = `UPDATE users SET name = ?, email = ?, mobile_no = ?, updated_at = ? WHERE id = ? AND role_id = ?`;\n            let updateUserData = [data['name'],data['email'],data['mobile_no'],new Date().toJSON(),data['id'],data['role_id']];\n            db.executeSql(sql,updateUserData).then((row: any)=>{\n                return { event_id:row.insertId }\n             }).catch(res=>{\n                return res;\n             });\n        })\n    }\n\n    async updateUserImage(data) {\n        let user_id = await this.getuserID();\n        return this.sqlite.create({\n            name: DATA_BASE_NAME,\n            location: 'default'\n        }).then((db: SQLiteObject) => {\n            let sql = `UPDATE users SET user_picture = ? WHERE id = ?`;\n            let updateEventImageData = [JSON.stringify(data),user_id]\n            \n            return db.executeSql(sql,updateEventImageData).then((row: any)=>{\n                return { event_id:row.insertId }\n            }).catch(res=>{\n                return res;\n            })\n        })\n    }\n\n    addPatient(value,patientAddData){\n     let data = value['user_uid'];\n        return this.sqlite.create({\n            name: DATA_BASE_NAME,\n            location: 'default'\n        }).then((db: SQLiteObject) => {\n            let sql = `SELECT * FROM users WHERE user_uid='${data}'`;\n            return db.executeSql(sql,[]).then((data: any)=>{\n                let length = data.rows.length;\n                if(length==0){\n                    let attribute_json = JSON.stringify(patientAddData[\"user_picture\"]);\n                    let user_option_json = JSON.parse(patientAddData['user_option']);  \n                    let data3 = [\n                        patientAddData[\"id\"],\n                        patientAddData[\"name\"],\n                        patientAddData[\"email\"],\n                        patientAddData[\"password\"],\n                        patientAddData[\"mobile_no\"],\n                        patientAddData[\"address\"],\n                        patientAddData[\"country\"],\n                        patientAddData[\"blood_group\"],\n                        patientAddData[\"age\"],\n                        patientAddData[\"user_uid\"],\n                        patientAddData[\"forgot_password_code\"],\n                        attribute_json,\n                        user_option_json,\n                        patientAddData[\"active_status\"],\n                        patientAddData[\"role_id\"],\n                        patientAddData[\"created_at\"],\n                        patientAddData[\"updated_at\"],\n                        false\n                    ];\n                    let sqlData3 = `INSERT INTO users VALUES (?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?)`;\n                    return db.executeSql(sqlData3,data3).then(row => {\n                        return { id: row.insertId }\n                    }, error => {\n                        return error;\n                    });\n                }else{\n                    return;\n                }\n            })\n        })\n    }\n\n    async createEmergencyContacts(data) {\n        let user_id = await this.getuserID();\n        return this.sqlite.create({\n            name: DATA_BASE_NAME,\n            location: 'default'\n        }).then((db: SQLiteObject) => {\n            let sql = `INSERT INTO emergency_details VALUES (NULL,NULL,?,?,?,?,?,?,?)`;\n            let createEventData = [data[\"contact_name\"],data[\"emergency_no\"],user_type[data[\"user_type\"]],user_id,new Date().toJSON(),new Date().toJSON(),false]\n            return db.executeSql(sql,createEventData).then((row: any)=>{  \n                return { event_id:row.insertId }\n            }).catch(res=>{\n                return res;\n            });\n        })\n    }\n\n    deleteEmergencyContact(event){\n        return this.sqlite.create({\n            name: DATA_BASE_NAME,\n            location: 'default'\n        }).then((db: SQLiteObject) => { \n          //let sql = `DELETE FROM emergency_details WHERE emergency_id = ?`;\n          if(event[\"id\"]==null){\n            let sql = `DELETE FROM emergency_details WHERE emergency_id = ?`;\n            return db.executeSql(sql,[event[\"emergency_id\"]]).then((row: any)=>{\n              return { event_id:row.insertId }\n            }).catch(res=>{\n                return res;\n            });\n          }else{\n            let sql = `UPDATE emergency_details SET delete1 = ? WHERE emergency_id = ?`\n            return db.executeSql(sql,[true,event[\"emergency_id\"]]).then((row: any)=>{\n              return { event_id:row.insertId }\n            }).catch(res=>{\n                return res;\n            }); \n          }\n        })\n\n           \n    }\n\n    deletePatientFromCareGiver(id){\n        return this.sqlite.create({\n            name: DATA_BASE_NAME,\n            location: 'default'\n        }).then((db: SQLiteObject) => { \n          let sql = `UPDATE users SET delete1 = ? WHERE id = ?`;\n          return db.executeSql(sql,[true,id]).then(async (row: any)=>{\n            let sql1 = `DELETE FROM events WHERE user_id = ?`;\n            let createEventData1 = [id];\n            await db.executeSql(sql1,createEventData1)\n            return { event_id:row.insertId }\n         }).catch(res=>{\n            return res;\n         });\n        })\n    }\n\n    deleteCaregiverContact(id){\n        return this.sqlite.create({\n             name: DATA_BASE_NAME,\n             location: 'default'\n        }).then((db: SQLiteObject) => {\n           let sql = `UPDATE users SET delete1 = ? WHERE id = ?`;\n           return db.executeSql(sql,[true,id]).then((row: any)=>{\n            return { event_id:row.insertId }\n           }).catch(res=>{\n            return res;\n           });\n        })\n     }\n\n    async updateHealthData(data?,id?) {\n        let user_id = await this.getuserID();\n        return this.sqlite.create({\n            name: DATA_BASE_NAME,\n            location: 'default'\n        }).then((db: SQLiteObject) => {\n            return db.executeSql(`SELECT * FROM health_details WHERE name='${data['name']}'`,[]).then((getData)=>{\n              let sqlQuery:any;\n              let healthData:any;\n              \n              if(getData.rows.length>0){\n                sqlQuery = `UPDATE health_details SET id = ?, name = ?, attribute_name_value = ?, user_id = ?, created_at = ?, updated_at = ? WHERE health_id = ?`;\n                healthData = [data[\"id\"],data[\"name\"],JSON.stringify(data[\"attribute_name_value\"]),user_id,data[\"created_at\"],new Date().toJSON(),id]    \n              }else{\n                sqlQuery = `INSERT INTO health_details VALUES (NULL,NULL,?,?,?,?,?)`;\n                healthData = [data[\"name\"],JSON.stringify(data[\"attribute_name_value\"]),user_id,new Date().toJSON(),new Date().toJSON()];\n              }\n             \n            \n              return db.executeSql(sqlQuery,healthData).then((row: any)=>{\n              \n                return { event_id:row.insertId }\n              }).catch(res=>{\n                   \n                    return res;\n              })\n            }).catch(res=>{\n                \n                return res;\n            })\n        })\n    }\n\n    deleteDataFromTable(){\n        return this.sqlite.create({\n            name: DATA_BASE_NAME,\n            location: 'default'\n        }).then((db: SQLiteObject) => { \n           for(let i in SQL_TABLES){\n            let sql = `DELETE FROM ${SQL_TABLES[i]}`;\n            db.executeSql(sql,[]);\n           } \n          \n        })\n    }\n\n    getuserID(){\n        let user_id:any=null;\n        if(localStorage.getItem(\"user_id\")!=undefined){\n            user_id=localStorage.getItem(\"user_id\");\n            return user_id;\n        }\n        \n        return user_id\n    }\n\n    getProfileID(){\n        let profile_id:any=null;\n        if(localStorage.getItem(\"profile_id\")!=undefined){\n            profile_id=localStorage.getItem(\"profile_id\");\n            return profile_id;\n        }\n        \n        return profile_id\n    }\n\n}\n"],"sourceRoot":""}